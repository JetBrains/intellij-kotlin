4 fun <bold>Any</bold>.extensionFun() {
8 	[LAMBDA CALLS RECEIVER] with(123) <bold>{</bold>
45 		(INLINE CALL with) [LAMBDA CALLS RECEIVER] inline fun <T, R> with(receiver: T, <bold>block: T.() -> R</bold>): R {
46 			(INLINE CALL with) val result = <bold>receiver</bold>.block()
45 				(INLINE CALL with) inline fun <T, R> with(<bold>receiver: T</bold>, block: T.() -> R): R {
8 					with(<bold>123</bold>) {
13 	<bold>this</bold>.extensionFun()
12 		[LAMBDA CALLS RECEIVER] with(456) <bold>{</bold>
45 			(INLINE CALL with) [LAMBDA CALLS RECEIVER] inline fun <T, R> with(receiver: T, <bold>block: T.() -> R</bold>): R {
46 				(INLINE CALL with) val result = <bold>receiver</bold>.block()
45 					(INLINE CALL with) inline fun <T, R> with(<bold>receiver: T</bold>, block: T.() -> R): R {
12 						with(<bold>456</bold>) {
20 	[LAMBDA CALLS RECEIVER] withNoInline(1) <bold>{</bold>
50 		[LAMBDA CALLS RECEIVER] fun <T, R> withNoInline(receiver: T, <bold>block: T.() -> R</bold>): R {
51 			val result = <bold>receiver</bold>.block()
50 				fun <T, R> withNoInline(<bold>receiver: T</bold>, block: T.() -> R): R {
20 					withNoInline(<bold>1</bold>) {
24 					withNoInline(<bold>2</bold>) {
29 	<bold>it</bold>.extensionFun()
28 		[LAMBDA CALLS ARGUMENT #0] "A".let <bold>{</bold>
108 			(INLINE CALL let) [LAMBDA CALLS ARGUMENT #0] public inline fun <T, R> T.let(<bold>block: (T) -> R</bold>): R {
112 				(INLINE CALL let) return block(<bold>this</bold>)
108 					(INLINE CALL let) public inline fun <T, R> <bold>T</bold>.let(block: (T) -> R): R {
28 						<bold>"A"</bold>.let {
37 	<bold>it</bold>.extensionFun()
36 		[LAMBDA CALLS ARGUMENT #0] "D".letNoInline <bold>{</bold>
55 			[LAMBDA CALLS ARGUMENT #0] fun <T, R> T.letNoInline(<bold>block: (T) -> R</bold>): R {
56 				return block(<bold>this</bold>)
55 					fun <T, R> <bold>T</bold>.letNoInline(block: (T) -> R): R {
36 						<bold>"D"</bold>.letNoInline {
40 						<bold>"C"</bold>.letNoInline {
