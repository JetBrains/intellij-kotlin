package

public val x: kotlin.Nothing
public val y: kotlin.Nothing
public fun bar(): kotlin.Nothing
public fun baz(): kotlin.Nothing
public fun check(): kotlin.Unit
public fun foo(): kotlin.Nothing
public fun gav(): kotlin.Any
public fun nonLocalReturn(): kotlin.Nothing

public interface Base {
    public abstract val x: kotlin.Int
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public abstract fun foo(): kotlin.String
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Derived : Base {
    public constructor Derived()
    public open override /*1*/ val x: kotlin.Nothing
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ fun foo(): kotlin.Nothing
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Klass {
    public constructor Klass()
    public final val y: kotlin.Nothing
    public final fun bar(): kotlin.Nothing
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public final fun foo(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
