package

public fun directInvocation(): kotlin.Unit
public fun multipleParameters(): kotlin.Unit
public fun unresolvedParameter(): kotlin.Unit
public fun viaFakeOverride(): kotlin.Unit
public fun viaRealOverride(): kotlin.Unit

public open class JavaSuperClass {
    public constructor JavaSuperClass()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open fun foo(/*0*/ javaName: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open fun multipleParameters(/*0*/ first: kotlin.Int, /*1*/ second: kotlin.Long, /*2*/ third: kotlin.String!): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public open class KotlinSubClass : JavaSuperClass {
    public constructor KotlinSubClass()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun foo(/*0*/ javaName: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun multipleParameters(/*0*/ first: kotlin.Int, /*1*/ second: kotlin.Long, /*2*/ third: kotlin.String!): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class KotlinSubSubClass : KotlinSubClass {
    public constructor KotlinSubSubClass()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ fun foo(/*0*/ kotlinName: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun multipleParameters(/*0*/ first: kotlin.Int, /*1*/ second: kotlin.Long, /*2*/ third: kotlin.String!): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
