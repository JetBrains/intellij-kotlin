package

package a {

    public open class Base {
        public constructor Base()
        public final val p: kotlin.Int = 1
        public final val kotlin.Int.ext: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public final fun f(): kotlin.Unit
        public final fun </*0*/ T> g(/*0*/ t: T): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public interface BaseI</*0*/ T> {
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open fun fromI(): kotlin.Int
        public open fun genericFromI(/*0*/ t: T): T
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public object K : a.Base, a.BaseI<kotlin.Int> {
        private constructor K()
        public final val own: kotlin.String = ""
        public final override /*1*/ /*fake_override*/ val p: kotlin.Int
        public final override /*1*/ /*fake_override*/ val kotlin.Int.ext: kotlin.Int
        public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public final override /*1*/ /*fake_override*/ fun f(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun fromI(): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun </*0*/ T> g(/*0*/ t: T): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun genericFromI(/*0*/ t: kotlin.Int): kotlin.Int
        public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public object O {
        private constructor O()
        public final fun bar(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        public final class A {
            public constructor A()
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }

        public object B {
            private constructor B()
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
    }

    public object S {
        private constructor S()
        public final val prop: kotlin.String = ""
        public final var kotlin.String.ext: kotlin.Int
        public final fun A(/*0*/ c: kotlin.Int): a.S.A
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public final fun </*0*/ T> genericFun(/*0*/ t: T, /*1*/ t2: T): T
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public final fun o(/*0*/ i: kotlin.Int): kotlin.Unit
        public final fun o(/*0*/ s: kotlin.String): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        public final fun kotlin.Int.ext(): kotlin.Unit

        public final class A {
            public constructor A()
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
    }
}

package b {
    public fun testErroneusAllUnderImportFromObject(): kotlin.Unit
}

package c {
    public fun </*0*/ T> t(/*0*/ t: T): T
    public fun testImportFromObjectByName(): kotlin.Unit
}

package d {
    public fun testFunImportedFromObjectHasNoDispatchReceiver(/*0*/ l: a.S): kotlin.Unit
}

package e {
    public fun testMembersFromSupertypes(): kotlin.Unit
}
