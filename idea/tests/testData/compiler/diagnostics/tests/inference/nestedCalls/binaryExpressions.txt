package

package h {
    public fun </*0*/ T> id(/*0*/ t: T): T
    public fun </*0*/ T> newA(): h.A<T>
    public fun test(/*0*/ z: h.Z): kotlin.Unit
    public fun test1(/*0*/ z: h.Z): kotlin.Unit
    public fun test2(/*0*/ z: h.Z): kotlin.Unit
    public fun test3(/*0*/ z: h.Z): kotlin.Unit
    public fun test4(/*0*/ collection: kotlin.collections.Collection<h.A<*>>): kotlin.Unit
    public fun test5(): kotlin.Unit
    public fun </*0*/ T> toBeOrNot(): kotlin.Boolean
    public fun use(/*0*/ vararg a: kotlin.Any? /*kotlin.Array<out kotlin.Any?>*/): kotlin.Array<out kotlin.Any?>
    public operator fun </*0*/ T> h.Z.compareTo(/*0*/ a: h.A<T>): kotlin.Int
    public fun h.Z.equals(/*0*/ any: kotlin.Any): kotlin.Int
    public infix fun </*0*/ T> h.Z.foo(/*0*/ a: h.A<T>): h.A<T>
    public operator fun </*0*/ T> h.Z.plus(/*0*/ a: h.A<T>): h.A<T>

    public interface A</*0*/ T> {
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public interface Z {
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
