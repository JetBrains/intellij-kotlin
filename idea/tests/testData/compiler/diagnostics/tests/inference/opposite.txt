package

package a {

    public interface Persistent {
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public interface PersistentFactory</*0*/ T> {
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }

    public final class Relation</*0*/ Source : a.Persistent, /*1*/ Target : a.Persistent> {
        public constructor Relation</*0*/ Source : a.Persistent, /*1*/ Target : a.Persistent>(/*0*/ sources: a.PersistentFactory<Source>, /*1*/ targets: a.PersistentFactory<Target>)
        public final val sources: a.PersistentFactory<Source>
        public final val targets: a.PersistentFactory<Target>
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public final fun opposite(): a.Relation<Target, Source>
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
