package

public fun </*0*/ T> doOut(/*0*/ o: Out<T?>): T
public fun </*0*/ T> foo(/*0*/ a: A<T>, /*1*/ o: Out<T?>): T
public fun test(/*0*/ a: A<kotlin.Int>, /*1*/ aN: A<kotlin.Int?>, /*2*/ o: Out<kotlin.Int?>): kotlin.Unit

public interface A</*0*/ T> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface Out</*0*/ out T> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
