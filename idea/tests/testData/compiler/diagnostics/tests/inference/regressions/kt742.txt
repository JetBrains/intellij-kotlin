package

package a {
    public fun </*0*/ T, /*1*/ Q> a.List<T>.map1(/*0*/ f: (T) -> Q): a.List<T>?
    public fun </*0*/ T, /*1*/ Q> a.List<T>.map2(/*0*/ f: (T) -> Q): a.List<T>?
    public fun </*0*/ T, /*1*/ Q> a.List<T>.map3(/*0*/ f: (T) -> Q): a.List<T>?
    public fun </*0*/ T : kotlin.Any> T?.sure(): T

    public final class List</*0*/ T> {
        public constructor List</*0*/ T>(/*0*/ head: T, /*1*/ tail: a.List<T>? = ...)
        public final val head: T
        public final val tail: a.List<T>?
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
