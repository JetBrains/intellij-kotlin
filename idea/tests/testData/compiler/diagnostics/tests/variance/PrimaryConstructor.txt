package

public fun </*0*/ T> getT(): T

public interface In</*0*/ in T> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface Inv</*0*/ T> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface Out</*0*/ out T> {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Test</*0*/ in I, /*1*/ out O, /*2*/ P> {
    public constructor Test</*0*/ in I, /*1*/ out O, /*2*/ P>(/*0*/ type1: I, /*1*/ type2: O, /*2*/ type3: P, /*3*/ type4: In<I>, /*4*/ type5: In<O>, /*5*/ type6: I, /*6*/ type7: O, /*7*/ type8: P, /*8*/ type9: In<I>, /*9*/ type0: In<O>, /*10*/ type11: I, /*11*/ type12: O, /*12*/ type13: P, /*13*/ type14: In<I>, /*14*/ type15: In<O>)
    public final var type0: In<O>
    public final val type1: I
    public final val type2: O
    public final val type3: P
    public final val type4: In<I>
    public final val type5: In<O>
    public final var type6: I
    public final var type7: O
    public final var type8: P
    public final var type9: In<I>
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
