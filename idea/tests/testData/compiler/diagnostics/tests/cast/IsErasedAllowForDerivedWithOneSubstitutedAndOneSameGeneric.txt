package

public fun </*0*/ T, /*1*/ U> testing(/*0*/ a: BaseTwo<T, U>): kotlin.Boolean

public open class BaseTwo</*0*/ A, /*1*/ B> {
    public constructor BaseTwo</*0*/ A, /*1*/ B>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public open class DerivedWithOne</*0*/ D> : BaseTwo<D, kotlin.String> {
    public constructor DerivedWithOne</*0*/ D>()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
