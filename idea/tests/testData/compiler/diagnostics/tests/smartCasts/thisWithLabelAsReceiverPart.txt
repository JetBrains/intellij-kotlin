package

package foo {
    public fun test3(): kotlin.Unit
    public fun useFunction(/*0*/ f: foo.A.() -> kotlin.Unit): foo.A.() -> kotlin.Unit
    public fun useInt(/*0*/ i: kotlin.Int): kotlin.Int
    public fun foo.A.foo(): kotlin.Unit

    public final class A {
        public constructor A(/*0*/ c: foo.C)
        public final val c: foo.C
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public final fun test1(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

        public final inner class B {
            public constructor B()
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final fun test2(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
    }

    public final class C {
        public constructor C(/*0*/ i: kotlin.Int?)
        public final val i: kotlin.Int?
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
