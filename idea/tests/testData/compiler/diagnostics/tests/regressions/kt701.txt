package

public fun </*0*/ T> getJavaClass(): java.lang.Class<T>

public final class Throwables {
    public constructor Throwables()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String

    public companion object Companion {
        private constructor Companion()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public final fun </*0*/ X : kotlin.Throwable?> propagateIfInstanceOf(/*0*/ throwable: kotlin.Throwable?, /*1*/ declaredType: java.lang.Class<X?>?): kotlin.Unit
        public final fun propagateIfPossible(/*0*/ throwable: kotlin.Throwable?): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
}
