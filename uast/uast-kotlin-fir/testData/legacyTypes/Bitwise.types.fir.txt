UFile (package = ) [public final class BitwiseKt {...]
    UClass (name = BitwiseKt) [public final class BitwiseKt {...}]
        UMethod (name = foo) [public static final fun foo() : int {...}]
            UBlockExpression [{...}] : PsiType:Void
                UDeclarationsExpression [var mask: <ErrorType> = 127]
                    ULocalVariable (name = mask) [var mask: <ErrorType> = 127]
                        ULiteralExpression (value = 127) [127] : PsiType:int
                UDeclarationsExpression [var x: <ErrorType> = 2863311530]
                    ULocalVariable (name = x) [var x: <ErrorType> = 2863311530]
                        ULiteralExpression (value = 2863311530) [2863311530] : PsiType:long
                UDeclarationsExpression [var pos: <ErrorType> = x <other> mask]
                    ULocalVariable (name = pos) [var pos: <ErrorType> = x <other> mask]
                        UBinaryExpression (operator = <other>) [x <other> mask] : PsiType:int
                            USimpleNameReferenceExpression (identifier = x) [x] : PsiType:int
                            USimpleNameReferenceExpression (identifier = mask) [mask] : PsiType:int
                UDeclarationsExpression [var max: <ErrorType> = x <other> mask]
                    ULocalVariable (name = max) [var max: <ErrorType> = x <other> mask]
                        UBinaryExpression (operator = <other>) [x <other> mask] : PsiType:int
                            USimpleNameReferenceExpression (identifier = x) [x] : PsiType:int
                            USimpleNameReferenceExpression (identifier = mask) [mask] : PsiType:int
                UDeclarationsExpression [var zebra: <ErrorType> = x <other> mask]
                    ULocalVariable (name = zebra) [var zebra: <ErrorType> = x <other> mask]
                        UBinaryExpression (operator = <other>) [x <other> mask] : PsiType:int
                            USimpleNameReferenceExpression (identifier = x) [x] : PsiType:int
                            USimpleNameReferenceExpression (identifier = mask) [mask] : PsiType:int
                UDeclarationsExpression [var signed: <ErrorType> = x <other> 2]
                    ULocalVariable (name = signed) [var signed: <ErrorType> = x <other> 2]
                        UBinaryExpression (operator = <other>) [x <other> 2] : PsiType:int
                            USimpleNameReferenceExpression (identifier = x) [x] : PsiType:int
                            ULiteralExpression (value = 2) [2] : PsiType:int
                UDeclarationsExpression [var one: <ErrorType> = x <other> 31]
                    ULocalVariable (name = one) [var one: <ErrorType> = x <other> 31]
                        UBinaryExpression (operator = <other>) [x <other> 31] : PsiType:int
                            USimpleNameReferenceExpression (identifier = x) [x] : PsiType:int
                            ULiteralExpression (value = 31) [31] : PsiType:int
                UDeclarationsExpression [var zero: <ErrorType> = x <other> 32]
                    ULocalVariable (name = zero) [var zero: <ErrorType> = x <other> 32]
                        UBinaryExpression (operator = <other>) [x <other> 32] : PsiType:int
                            USimpleNameReferenceExpression (identifier = x) [x] : PsiType:int
                            ULiteralExpression (value = 32) [32] : PsiType:int
                UReturnExpression [return pos + zero - zebra * signed / one] : PsiType:Void
                    UBinaryExpression (operator = -) [pos + zero - zebra * signed / one] : PsiType:int
                        UBinaryExpression (operator = +) [pos + zero] : PsiType:int
                            USimpleNameReferenceExpression (identifier = pos) [pos] : PsiType:int
                            USimpleNameReferenceExpression (identifier = zero) [zero] : PsiType:int
                        UBinaryExpression (operator = /) [zebra * signed / one] : PsiType:int
                            UBinaryExpression (operator = *) [zebra * signed] : PsiType:int
                                USimpleNameReferenceExpression (identifier = zebra) [zebra] : PsiType:int
                                USimpleNameReferenceExpression (identifier = signed) [signed] : PsiType:int
                            USimpleNameReferenceExpression (identifier = one) [one] : PsiType:int
        UMethod (name = bar) [public static final fun bar() : long {...}]
            UBlockExpression [{...}] : PsiType:Void
                UDeclarationsExpression [var mask: <ErrorType> = 127]
                    ULocalVariable (name = mask) [var mask: <ErrorType> = 127]
                        ULiteralExpression (value = 127) [127] : PsiType:long
                UDeclarationsExpression [var x: <ErrorType> = 6148914691236517205]
                    ULocalVariable (name = x) [var x: <ErrorType> = 6148914691236517205]
                        ULiteralExpression (value = 6148914691236517205) [6148914691236517205] : PsiType:long
                UDeclarationsExpression [var pos: <ErrorType> = x <other> mask]
                    ULocalVariable (name = pos) [var pos: <ErrorType> = x <other> mask]
                        UBinaryExpression (operator = <other>) [x <other> mask] : PsiType:long
                            USimpleNameReferenceExpression (identifier = x) [x] : PsiType:long
                            USimpleNameReferenceExpression (identifier = mask) [mask] : PsiType:long
                UDeclarationsExpression [var max: <ErrorType> = x <other> mask]
                    ULocalVariable (name = max) [var max: <ErrorType> = x <other> mask]
                        UBinaryExpression (operator = <other>) [x <other> mask] : PsiType:long
                            USimpleNameReferenceExpression (identifier = x) [x] : PsiType:long
                            USimpleNameReferenceExpression (identifier = mask) [mask] : PsiType:long
                UDeclarationsExpression [var zebra: <ErrorType> = x <other> mask]
                    ULocalVariable (name = zebra) [var zebra: <ErrorType> = x <other> mask]
                        UBinaryExpression (operator = <other>) [x <other> mask] : PsiType:long
                            USimpleNameReferenceExpression (identifier = x) [x] : PsiType:long
                            USimpleNameReferenceExpression (identifier = mask) [mask] : PsiType:long
                UDeclarationsExpression [var signed: <ErrorType> = x <other> 2]
                    ULocalVariable (name = signed) [var signed: <ErrorType> = x <other> 2]
                        UBinaryExpression (operator = <other>) [x <other> 2] : PsiType:long
                            USimpleNameReferenceExpression (identifier = x) [x] : PsiType:long
                            ULiteralExpression (value = 2) [2] : PsiType:int
                UDeclarationsExpression [var one: <ErrorType> = x <other> 63]
                    ULocalVariable (name = one) [var one: <ErrorType> = x <other> 63]
                        UBinaryExpression (operator = <other>) [x <other> 63] : PsiType:long
                            USimpleNameReferenceExpression (identifier = x) [x] : PsiType:long
                            ULiteralExpression (value = 63) [63] : PsiType:int
                UDeclarationsExpression [var zero: <ErrorType> = x <other> 64]
                    ULocalVariable (name = zero) [var zero: <ErrorType> = x <other> 64]
                        UBinaryExpression (operator = <other>) [x <other> 64] : PsiType:long
                            USimpleNameReferenceExpression (identifier = x) [x] : PsiType:long
                            ULiteralExpression (value = 64) [64] : PsiType:int
                UReturnExpression [return pos + zero - zebra * signed / one] : PsiType:Void
                    UBinaryExpression (operator = -) [pos + zero - zebra * signed / one] : PsiType:long
                        UBinaryExpression (operator = +) [pos + zero] : PsiType:long
                            USimpleNameReferenceExpression (identifier = pos) [pos] : PsiType:long
                            USimpleNameReferenceExpression (identifier = zero) [zero] : PsiType:long
                        UBinaryExpression (operator = /) [zebra * signed / one] : PsiType:long
                            UBinaryExpression (operator = *) [zebra * signed] : PsiType:long
                                USimpleNameReferenceExpression (identifier = zebra) [zebra] : PsiType:long
                                USimpleNameReferenceExpression (identifier = signed) [signed] : PsiType:long
                            USimpleNameReferenceExpression (identifier = one) [one] : PsiType:long
