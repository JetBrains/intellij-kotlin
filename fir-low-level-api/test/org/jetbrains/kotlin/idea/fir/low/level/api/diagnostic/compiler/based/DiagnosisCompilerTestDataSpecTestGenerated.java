/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.idea.fir.low.level.api.diagnostic.compiler.based;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.idea.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.idea.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.jetbrains.kotlin.idea.test.TestRoot;
import org.junit.runner.RunWith;
import static org.jetbrains.kotlin.idea.artifacts.AdditionalKotlinArtifacts.compilerTestData;

/*
 * This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}.
 * DO NOT MODIFY MANUALLY.
 */
@SuppressWarnings("all")
@TestRoot("fir-low-level-api")
@TestDataPath("$CONTENT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
@TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics")
public abstract class DiagnosisCompilerTestDataSpecTestGenerated extends AbstractDiagnosisCompilerTestDataSpecTest {
    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked")
    public abstract static class Linked extends AbstractDiagnosisCompilerTestDataSpecTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/control--and-data-flow-analysis")
        public abstract static class Control__and_data_flow_analysis extends AbstractDiagnosisCompilerTestDataSpecTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/control--and-data-flow-analysis/control-flow-graph")
            public abstract static class Control_flow_graph extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/control--and-data-flow-analysis/control-flow-graph/expressions-1")
                public abstract static class Expressions_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/control--and-data-flow-analysis/control-flow-graph/expressions-1/conditional-expressions")
                    public abstract static class Conditional_expressions extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/control--and-data-flow-analysis/control-flow-graph/expressions-1/conditional-expressions/p-1")
                        public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                            @RunWith(JUnit3RunnerWithInners.class)
                            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/control--and-data-flow-analysis/control-flow-graph/expressions-1/conditional-expressions/p-1/neg")
                            public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                                private void runTest(String testDataFilePath) throws Exception {
                                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                                }

                                @TestMetadata("1.1.kt")
                                public void test1_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/control--and-data-flow-analysis/control-flow-graph/expressions-1/conditional-expressions/p-1/neg/1.1.kt"));
                                }

                                @TestMetadata("1.2.kt")
                                public void test1_2() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/control--and-data-flow-analysis/control-flow-graph/expressions-1/conditional-expressions/p-1/neg/1.2.kt"));
                                }

                                @TestMetadata("1.3.kt")
                                public void test1_3() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/control--and-data-flow-analysis/control-flow-graph/expressions-1/conditional-expressions/p-1/neg/1.3.kt"));
                                }

                                @TestMetadata("1.4.kt")
                                public void test1_4() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/control--and-data-flow-analysis/control-flow-graph/expressions-1/conditional-expressions/p-1/neg/1.4.kt"));
                                }

                                @TestMetadata("2.1.kt")
                                public void test2_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/control--and-data-flow-analysis/control-flow-graph/expressions-1/conditional-expressions/p-1/neg/2.1.kt"));
                                }
                            }

                            @RunWith(JUnit3RunnerWithInners.class)
                            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/control--and-data-flow-analysis/control-flow-graph/expressions-1/conditional-expressions/p-1/pos")
                            public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                                private void runTest(String testDataFilePath) throws Exception {
                                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                                }

                                @TestMetadata("1.1.kt")
                                public void test1_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/control--and-data-flow-analysis/control-flow-graph/expressions-1/conditional-expressions/p-1/pos/1.1.kt"));
                                }

                                @TestMetadata("1.2.kt")
                                public void test1_2() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/control--and-data-flow-analysis/control-flow-graph/expressions-1/conditional-expressions/p-1/pos/1.2.kt"));
                                }

                                @TestMetadata("2.1.kt")
                                public void test2_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/control--and-data-flow-analysis/control-flow-graph/expressions-1/conditional-expressions/p-1/pos/2.1.kt"));
                                }
                            }
                        }
                    }
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/declarations")
        public abstract static class Declarations extends AbstractDiagnosisCompilerTestDataSpecTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration")
            public abstract static class Classifier_declaration extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration")
                public abstract static class Class_declaration extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/abstract-classes")
                    public abstract static class Abstract_classes extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/abstract-classes/p-1")
                        public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                            @RunWith(JUnit3RunnerWithInners.class)
                            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/abstract-classes/p-1/neg")
                            public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                                private void runTest(String testDataFilePath) throws Exception {
                                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                                }

                                @TestMetadata("1.1.kt")
                                public void test1_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/abstract-classes/p-1/neg/1.1.kt"));
                                }

                                @TestMetadata("2.1.kt")
                                public void test2_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/abstract-classes/p-1/neg/2.1.kt"));
                                }
                            }

                            @RunWith(JUnit3RunnerWithInners.class)
                            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/abstract-classes/p-1/pos")
                            public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                                private void runTest(String testDataFilePath) throws Exception {
                                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                                }

                                @TestMetadata("2.1.kt")
                                public void test2_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/abstract-classes/p-1/pos/2.1.kt"));
                                }
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/abstract-classes/p-2")
                        public abstract static class P_2 extends AbstractDiagnosisCompilerTestDataSpecTest {
                            @RunWith(JUnit3RunnerWithInners.class)
                            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/abstract-classes/p-2/neg")
                            public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                                private void runTest(String testDataFilePath) throws Exception {
                                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                                }

                                @TestMetadata("1.1.kt")
                                public void test1_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/abstract-classes/p-2/neg/1.1.kt"));
                                }

                                @TestMetadata("1.10.kt")
                                public void test1_10() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/abstract-classes/p-2/neg/1.10.kt"));
                                }

                                @TestMetadata("1.2.kt")
                                public void test1_2() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/abstract-classes/p-2/neg/1.2.kt"));
                                }

                                @TestMetadata("1.3.kt")
                                public void test1_3() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/abstract-classes/p-2/neg/1.3.kt"));
                                }

                                @TestMetadata("1.4.kt")
                                public void test1_4() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/abstract-classes/p-2/neg/1.4.kt"));
                                }

                                @TestMetadata("1.5.kt")
                                public void test1_5() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/abstract-classes/p-2/neg/1.5.kt"));
                                }

                                @TestMetadata("1.6.kt")
                                public void test1_6() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/abstract-classes/p-2/neg/1.6.kt"));
                                }

                                @TestMetadata("1.7.kt")
                                public void test1_7() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/abstract-classes/p-2/neg/1.7.kt"));
                                }

                                @TestMetadata("1.8.kt")
                                public void test1_8() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/abstract-classes/p-2/neg/1.8.kt"));
                                }

                                @TestMetadata("1.9.kt")
                                public void test1_9() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/abstract-classes/p-2/neg/1.9.kt"));
                                }
                            }

                            @RunWith(JUnit3RunnerWithInners.class)
                            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/abstract-classes/p-2/pos")
                            public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                                private void runTest(String testDataFilePath) throws Exception {
                                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                                }

                                @TestMetadata("1.1.kt")
                                public void test1_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/abstract-classes/p-2/pos/1.1.kt"));
                                }

                                @TestMetadata("1.2.kt")
                                public void test1_2() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/abstract-classes/p-2/pos/1.2.kt"));
                                }

                                @TestMetadata("1.3.kt")
                                public void test1_3() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/abstract-classes/p-2/pos/1.3.kt"));
                                }

                                @TestMetadata("1.4.kt")
                                public void test1_4() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/abstract-classes/p-2/pos/1.4.kt"));
                                }
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/constructor-declaration")
                    public abstract static class Constructor_declaration extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/constructor-declaration/p-4")
                        public abstract static class P_4 extends AbstractDiagnosisCompilerTestDataSpecTest {
                            @RunWith(JUnit3RunnerWithInners.class)
                            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/constructor-declaration/p-4/pos")
                            public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                                private void runTest(String testDataFilePath) throws Exception {
                                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                                }

                                @TestMetadata("1.1.kt")
                                public void test1_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/constructor-declaration/p-4/pos/1.1.kt"));
                                }
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/constructor-declaration/p-5")
                        public abstract static class P_5 extends AbstractDiagnosisCompilerTestDataSpecTest {
                            @RunWith(JUnit3RunnerWithInners.class)
                            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/constructor-declaration/p-5/neg")
                            public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                                private void runTest(String testDataFilePath) throws Exception {
                                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                                }

                                @TestMetadata("1.1.kt")
                                public void test1_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/constructor-declaration/p-5/neg/1.1.kt"));
                                }

                                @TestMetadata("1.2.kt")
                                public void test1_2() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/constructor-declaration/p-5/neg/1.2.kt"));
                                }

                                @TestMetadata("2.1.kt")
                                public void test2_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/constructor-declaration/p-5/neg/2.1.kt"));
                                }

                                @TestMetadata("3.1.kt")
                                public void test3_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/constructor-declaration/p-5/neg/3.1.kt"));
                                }
                            }

                            @RunWith(JUnit3RunnerWithInners.class)
                            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/constructor-declaration/p-5/pos")
                            public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                                private void runTest(String testDataFilePath) throws Exception {
                                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                                }

                                @TestMetadata("1.1.kt")
                                public void test1_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/constructor-declaration/p-5/pos/1.1.kt"));
                                }

                                @TestMetadata("1.2.kt")
                                public void test1_2() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/constructor-declaration/p-5/pos/1.2.kt"));
                                }

                                @TestMetadata("1.3.kt")
                                public void test1_3() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/constructor-declaration/p-5/pos/1.3.kt"));
                                }

                                @TestMetadata("1.4.kt")
                                public void test1_4() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/constructor-declaration/p-5/pos/1.4.kt"));
                                }

                                @TestMetadata("1.5.kt")
                                public void test1_5() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/constructor-declaration/p-5/pos/1.5.kt"));
                                }

                                @TestMetadata("2.1.kt")
                                public void test2_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/constructor-declaration/p-5/pos/2.1.kt"));
                                }

                                @TestMetadata("2.2.kt")
                                public void test2_2() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/constructor-declaration/p-5/pos/2.2.kt"));
                                }

                                @TestMetadata("2.3.kt")
                                public void test2_3() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/constructor-declaration/p-5/pos/2.3.kt"));
                                }

                                @TestMetadata("2.4.kt")
                                public void test2_4() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/constructor-declaration/p-5/pos/2.4.kt"));
                                }

                                @TestMetadata("3.1.kt")
                                public void test3_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/constructor-declaration/p-5/pos/3.1.kt"));
                                }

                                @TestMetadata("3.2.kt")
                                public void test3_2() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/constructor-declaration/p-5/pos/3.2.kt"));
                                }

                                @TestMetadata("3.3.kt")
                                public void test3_3() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/constructor-declaration/p-5/pos/3.3.kt"));
                                }

                                @TestMetadata("3.4.kt")
                                public void test3_4() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/classifier-declaration/class-declaration/constructor-declaration/p-5/pos/3.4.kt"));
                                }
                            }
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/declarations/property-declaration")
            public abstract static class Property_declaration extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/declarations/property-declaration/local-property-declaration")
                public abstract static class Local_property_declaration extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/declarations/property-declaration/local-property-declaration/p-1")
                    public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/declarations/property-declaration/local-property-declaration/p-1/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/declarations/property-declaration/local-property-declaration/p-1/neg/1.1.kt"));
                            }
                        }
                    }
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions")
        public abstract static class Expressions extends AbstractDiagnosisCompilerTestDataSpecTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/additive-expression")
            public abstract static class Additive_expression extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/additive-expression/p-4")
                public abstract static class P_4 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/additive-expression/p-4/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/additive-expression/p-4/pos/1.1.kt"));
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/built-in-types-and-their-semantics")
            public abstract static class Built_in_types_and_their_semantics extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/built-in-types-and-their-semantics/kotlin.nothing-1")
                public abstract static class Kotlin_nothing_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/built-in-types-and-their-semantics/kotlin.nothing-1/p-1")
                    public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/built-in-types-and-their-semantics/kotlin.nothing-1/p-1/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/built-in-types-and-their-semantics/kotlin.nothing-1/p-1/pos/1.1.kt"));
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/built-in-types-and-their-semantics/kotlin.unit")
                public abstract static class Kotlin_unit extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/built-in-types-and-their-semantics/kotlin.unit/p-1")
                    public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/built-in-types-and-their-semantics/kotlin.unit/p-1/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/built-in-types-and-their-semantics/kotlin.unit/p-1/pos/1.1.kt"));
                            }
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/comparison-expressions")
            public abstract static class Comparison_expressions extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/comparison-expressions/p-1")
                public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/comparison-expressions/p-1/neg")
                    public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("2.1.kt")
                        public void test2_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/comparison-expressions/p-1/neg/2.1.kt"));
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/comparison-expressions/p-4")
                public abstract static class P_4 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/comparison-expressions/p-4/neg")
                    public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/comparison-expressions/p-4/neg/1.1.kt"));
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/comparison-expressions/p-5")
                public abstract static class P_5 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/comparison-expressions/p-5/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/comparison-expressions/p-5/pos/1.1.kt"));
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/conditional-expression")
            public abstract static class Conditional_expression extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/conditional-expression/p-6")
                public abstract static class P_6 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/conditional-expression/p-6/neg")
                    public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/conditional-expression/p-6/neg/1.1.kt"));
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/conditional-expression/p-6/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/conditional-expression/p-6/pos/1.1.kt"));
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals")
            public abstract static class Constant_literals extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/boolean-literals")
                public abstract static class Boolean_literals extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/boolean-literals/p-1")
                    public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/boolean-literals/p-1/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("2.1.kt")
                            public void test2_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/boolean-literals/p-1/neg/2.1.kt"));
                            }

                            @TestMetadata("3.1.kt")
                            public void test3_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/boolean-literals/p-1/neg/3.1.kt"));
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/boolean-literals/p-1/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("2.1.kt")
                            public void test2_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/boolean-literals/p-1/pos/2.1.kt"));
                            }

                            @TestMetadata("3.1.kt")
                            public void test3_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/boolean-literals/p-1/pos/3.1.kt"));
                            }

                            @TestMetadata("3.2.kt")
                            public void test3_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/boolean-literals/p-1/pos/3.2.kt"));
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/character-literals")
                public abstract static class Character_literals extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/character-literals/p-1")
                    public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/character-literals/p-1/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/character-literals/p-1/neg/1.1.kt"));
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/character-literals/p-1/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/character-literals/p-1/pos/1.1.kt"));
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/character-literals/p-4")
                    public abstract static class P_4 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/character-literals/p-4/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/character-literals/p-4/neg/1.1.kt"));
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/character-literals/p-4/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/character-literals/p-4/pos/1.1.kt"));
                            }

                            @TestMetadata("1.2.kt")
                            public void test1_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/character-literals/p-4/pos/1.2.kt"));
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/integer-literals")
                public abstract static class Integer_literals extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/integer-literals/binary-integer-literals")
                    public abstract static class Binary_integer_literals extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/integer-literals/binary-integer-literals/p-1")
                        public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                            @RunWith(JUnit3RunnerWithInners.class)
                            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/integer-literals/binary-integer-literals/p-1/neg")
                            public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                                private void runTest(String testDataFilePath) throws Exception {
                                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                                }

                                @TestMetadata("1.1.kt")
                                public void test1_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/integer-literals/binary-integer-literals/p-1/neg/1.1.kt"));
                                }

                                @TestMetadata("2.1.kt")
                                public void test2_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/integer-literals/binary-integer-literals/p-1/neg/2.1.kt"));
                                }

                                @TestMetadata("2.2.kt")
                                public void test2_2() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/integer-literals/binary-integer-literals/p-1/neg/2.2.kt"));
                                }

                                @TestMetadata("2.3.kt")
                                public void test2_3() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/integer-literals/binary-integer-literals/p-1/neg/2.3.kt"));
                                }
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/integer-literals/decimal-integer-literals")
                    public abstract static class Decimal_integer_literals extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/integer-literals/decimal-integer-literals/p-1")
                        public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                            @RunWith(JUnit3RunnerWithInners.class)
                            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/integer-literals/decimal-integer-literals/p-1/neg")
                            public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                                private void runTest(String testDataFilePath) throws Exception {
                                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                                }

                                @TestMetadata("2.1.kt")
                                public void test2_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/integer-literals/decimal-integer-literals/p-1/neg/2.1.kt"));
                                }

                                @TestMetadata("2.2.kt")
                                public void test2_2() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/integer-literals/decimal-integer-literals/p-1/neg/2.2.kt"));
                                }

                                @TestMetadata("2.3.kt")
                                public void test2_3() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/integer-literals/decimal-integer-literals/p-1/neg/2.3.kt"));
                                }
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/integer-literals/hexadecimal-integer-literals")
                    public abstract static class Hexadecimal_integer_literals extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/integer-literals/hexadecimal-integer-literals/p-1")
                        public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                            @RunWith(JUnit3RunnerWithInners.class)
                            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/integer-literals/hexadecimal-integer-literals/p-1/neg")
                            public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                                private void runTest(String testDataFilePath) throws Exception {
                                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                                }

                                @TestMetadata("1.1.kt")
                                public void test1_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/integer-literals/hexadecimal-integer-literals/p-1/neg/1.1.kt"));
                                }

                                @TestMetadata("2.1.kt")
                                public void test2_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/integer-literals/hexadecimal-integer-literals/p-1/neg/2.1.kt"));
                                }

                                @TestMetadata("2.2.kt")
                                public void test2_2() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/integer-literals/hexadecimal-integer-literals/p-1/neg/2.2.kt"));
                                }

                                @TestMetadata("2.3.kt")
                                public void test2_3() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/integer-literals/hexadecimal-integer-literals/p-1/neg/2.3.kt"));
                                }

                                @TestMetadata("2.4.kt")
                                public void test2_4() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/integer-literals/hexadecimal-integer-literals/p-1/neg/2.4.kt"));
                                }
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals")
                public abstract static class Real_literals extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-1")
                    public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-1/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-1/neg/1.1.kt"));
                            }

                            @TestMetadata("3.1.kt")
                            public void test3_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-1/neg/3.1.kt"));
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-1/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-1/pos/1.1.kt"));
                            }

                            @TestMetadata("1.2.kt")
                            public void test1_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-1/pos/1.2.kt"));
                            }

                            @TestMetadata("3.1.kt")
                            public void test3_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-1/pos/3.1.kt"));
                            }

                            @TestMetadata("3.2.kt")
                            public void test3_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-1/pos/3.2.kt"));
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-2")
                    public abstract static class P_2 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-2/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-2/neg/1.1.kt"));
                            }

                            @TestMetadata("1.2.kt")
                            public void test1_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-2/neg/1.2.kt"));
                            }

                            @TestMetadata("1.3.kt")
                            public void test1_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-2/neg/1.3.kt"));
                            }

                            @TestMetadata("1.4.kt")
                            public void test1_4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-2/neg/1.4.kt"));
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-2/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-2/pos/1.1.kt"));
                            }

                            @TestMetadata("1.2.kt")
                            public void test1_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-2/pos/1.2.kt"));
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-3")
                    public abstract static class P_3 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-3/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-3/neg/1.1.kt"));
                            }

                            @TestMetadata("1.2.kt")
                            public void test1_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-3/neg/1.2.kt"));
                            }

                            @TestMetadata("2.1.kt")
                            public void test2_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-3/neg/2.1.kt"));
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-3/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-3/pos/1.1.kt"));
                            }

                            @TestMetadata("1.2.kt")
                            public void test1_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-3/pos/1.2.kt"));
                            }

                            @TestMetadata("1.3.kt")
                            public void test1_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-3/pos/1.3.kt"));
                            }

                            @TestMetadata("1.4.kt")
                            public void test1_4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-3/pos/1.4.kt"));
                            }

                            @TestMetadata("1.5.kt")
                            public void test1_5() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-3/pos/1.5.kt"));
                            }

                            @TestMetadata("2.1.kt")
                            public void test2_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-3/pos/2.1.kt"));
                            }

                            @TestMetadata("2.2.kt")
                            public void test2_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-3/pos/2.2.kt"));
                            }

                            @TestMetadata("2.3.kt")
                            public void test2_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-3/pos/2.3.kt"));
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-4")
                    public abstract static class P_4 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-4/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-4/neg/1.1.kt"));
                            }

                            @TestMetadata("1.2.kt")
                            public void test1_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-4/neg/1.2.kt"));
                            }

                            @TestMetadata("2.1.kt")
                            public void test2_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-4/neg/2.1.kt"));
                            }

                            @TestMetadata("2.2.kt")
                            public void test2_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-4/neg/2.2.kt"));
                            }

                            @TestMetadata("2.3.kt")
                            public void test2_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-4/neg/2.3.kt"));
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-4/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-4/pos/1.1.kt"));
                            }

                            @TestMetadata("1.2.kt")
                            public void test1_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-4/pos/1.2.kt"));
                            }

                            @TestMetadata("1.3.kt")
                            public void test1_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-4/pos/1.3.kt"));
                            }

                            @TestMetadata("1.4.kt")
                            public void test1_4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-4/pos/1.4.kt"));
                            }

                            @TestMetadata("1.5.kt")
                            public void test1_5() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-4/pos/1.5.kt"));
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-5")
                    public abstract static class P_5 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-5/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-5/pos/1.1.kt"));
                            }

                            @TestMetadata("1.2.kt")
                            public void test1_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-5/pos/1.2.kt"));
                            }

                            @TestMetadata("1.3.kt")
                            public void test1_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-5/pos/1.3.kt"));
                            }

                            @TestMetadata("1.4.kt")
                            public void test1_4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-5/pos/1.4.kt"));
                            }

                            @TestMetadata("1.5.kt")
                            public void test1_5() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/real-literals/p-5/pos/1.5.kt"));
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/the-types-for-integer-literals")
                public abstract static class The_types_for_integer_literals extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/the-types-for-integer-literals/p-1")
                    public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/the-types-for-integer-literals/p-1/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/the-types-for-integer-literals/p-1/neg/1.1.kt"));
                            }

                            @TestMetadata("1.2.kt")
                            public void test1_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/the-types-for-integer-literals/p-1/neg/1.2.kt"));
                            }

                            @TestMetadata("1.3.kt")
                            public void test1_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/the-types-for-integer-literals/p-1/neg/1.3.kt"));
                            }

                            @TestMetadata("2.1.kt")
                            public void test2_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/the-types-for-integer-literals/p-1/neg/2.1.kt"));
                            }

                            @TestMetadata("2.2.kt")
                            public void test2_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/the-types-for-integer-literals/p-1/neg/2.2.kt"));
                            }

                            @TestMetadata("2.3.kt")
                            public void test2_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/the-types-for-integer-literals/p-1/neg/2.3.kt"));
                            }

                            @TestMetadata("2.4.kt")
                            public void test2_4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/the-types-for-integer-literals/p-1/neg/2.4.kt"));
                            }

                            @TestMetadata("2.5.kt")
                            public void test2_5() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/the-types-for-integer-literals/p-1/neg/2.5.kt"));
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/the-types-for-integer-literals/p-1/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("2.1.kt")
                            public void test2_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/the-types-for-integer-literals/p-1/pos/2.1.kt"));
                            }

                            @TestMetadata("2.2.kt")
                            public void test2_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/the-types-for-integer-literals/p-1/pos/2.2.kt"));
                            }

                            @TestMetadata("2.3.kt")
                            public void test2_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/the-types-for-integer-literals/p-1/pos/2.3.kt"));
                            }

                            @TestMetadata("2.4.kt")
                            public void test2_4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/the-types-for-integer-literals/p-1/pos/2.4.kt"));
                            }

                            @TestMetadata("2.5.kt")
                            public void test2_5() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/constant-literals/the-types-for-integer-literals/p-1/pos/2.5.kt"));
                            }
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/elvis-operator-expression")
            public abstract static class Elvis_operator_expression extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/elvis-operator-expression/p-3")
                public abstract static class P_3 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/elvis-operator-expression/p-3/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/elvis-operator-expression/p-3/pos/1.1.kt"));
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/equality-expressions")
            public abstract static class Equality_expressions extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/equality-expressions/value-equality-expressions")
                public abstract static class Value_equality_expressions extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/equality-expressions/value-equality-expressions/p-3")
                    public abstract static class P_3 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/equality-expressions/value-equality-expressions/p-3/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/equality-expressions/value-equality-expressions/p-3/pos/1.1.kt"));
                            }
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/jump-expressions")
            public abstract static class Jump_expressions extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/jump-expressions/break-expression")
                public abstract static class Break_expression extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/jump-expressions/break-expression/p-1")
                    public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/jump-expressions/break-expression/p-1/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/jump-expressions/break-expression/p-1/neg/1.1.kt"));
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/jump-expressions/continue-expression")
                public abstract static class Continue_expression extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/jump-expressions/continue-expression/p-1")
                    public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/jump-expressions/continue-expression/p-1/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/jump-expressions/continue-expression/p-1/neg/1.1.kt"));
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/jump-expressions/p-2")
                public abstract static class P_2 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/jump-expressions/p-2/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/jump-expressions/p-2/pos/1.1.kt"));
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/jump-expressions/return-expressions")
                public abstract static class Return_expressions extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/jump-expressions/return-expressions/p-1")
                    public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/jump-expressions/return-expressions/p-1/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/jump-expressions/return-expressions/p-1/pos/1.1.kt"));
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/jump-expressions/return-expressions/p-4")
                    public abstract static class P_4 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/jump-expressions/return-expressions/p-4/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/jump-expressions/return-expressions/p-4/neg/1.1.kt"));
                            }
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/logical-conjunction-expression")
            public abstract static class Logical_conjunction_expression extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/logical-conjunction-expression/p-2")
                public abstract static class P_2 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/logical-conjunction-expression/p-2/neg")
                    public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/logical-conjunction-expression/p-2/neg/1.1.kt"));
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/logical-conjunction-expression/p-2/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/logical-conjunction-expression/p-2/pos/1.1.kt"));
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/logical-disjunction-expression")
            public abstract static class Logical_disjunction_expression extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/logical-disjunction-expression/p-2")
                public abstract static class P_2 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/logical-disjunction-expression/p-2/neg")
                    public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/logical-disjunction-expression/p-2/neg/1.1.kt"));
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/logical-disjunction-expression/p-2/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/logical-disjunction-expression/p-2/pos/1.1.kt"));
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/multiplicative-expression")
            public abstract static class Multiplicative_expression extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/multiplicative-expression/p-5")
                public abstract static class P_5 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/multiplicative-expression/p-5/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/multiplicative-expression/p-5/pos/1.1.kt"));
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/not-null-assertion-expression")
            public abstract static class Not_null_assertion_expression extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/not-null-assertion-expression/p-2")
                public abstract static class P_2 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/not-null-assertion-expression/p-2/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/not-null-assertion-expression/p-2/pos/1.1.kt"));
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/not-null-assertion-expression/p-3")
                public abstract static class P_3 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/not-null-assertion-expression/p-3/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/not-null-assertion-expression/p-3/pos/1.1.kt"));
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions")
            public abstract static class Prefix_expressions extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/logical-not-expression")
                public abstract static class Logical_not_expression extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/logical-not-expression/p-3")
                    public abstract static class P_3 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/logical-not-expression/p-3/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/logical-not-expression/p-3/pos/1.1.kt"));
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/prefix-decrement-expression")
                public abstract static class Prefix_decrement_expression extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/prefix-decrement-expression/p-4")
                    public abstract static class P_4 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/prefix-decrement-expression/p-4/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/prefix-decrement-expression/p-4/neg/1.1.kt"));
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/prefix-decrement-expression/p-5")
                    public abstract static class P_5 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/prefix-decrement-expression/p-5/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("2.1.kt")
                            public void test2_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/prefix-decrement-expression/p-5/neg/2.1.kt"));
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/prefix-increment-expression")
                public abstract static class Prefix_increment_expression extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/prefix-increment-expression/p-4")
                    public abstract static class P_4 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/prefix-increment-expression/p-4/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/prefix-increment-expression/p-4/neg/1.1.kt"));
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/prefix-increment-expression/p-5")
                    public abstract static class P_5 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/prefix-increment-expression/p-5/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("2.1.kt")
                            public void test2_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/prefix-increment-expression/p-5/neg/2.1.kt"));
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/unary-minus-expression")
                public abstract static class Unary_minus_expression extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/unary-minus-expression/p-3")
                    public abstract static class P_3 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/unary-minus-expression/p-3/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/unary-minus-expression/p-3/pos/1.1.kt"));
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/unary-plus-expression")
                public abstract static class Unary_plus_expression extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/unary-plus-expression/p-3")
                    public abstract static class P_3 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/unary-plus-expression/p-3/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/prefix-expressions/unary-plus-expression/p-3/pos/1.1.kt"));
                            }
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/range-expression")
            public abstract static class Range_expression extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/range-expression/p-4")
                public abstract static class P_4 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/range-expression/p-4/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/range-expression/p-4/pos/1.1.kt"));
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression")
            public abstract static class Try_expression extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression/p-1")
                public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression/p-1/neg")
                    public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression/p-1/neg/1.1.kt"));
                        }

                        @TestMetadata("3.1.kt")
                        public void test3_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression/p-1/neg/3.1.kt"));
                        }

                        @TestMetadata("4.1.kt")
                        public void test4_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression/p-1/neg/4.1.kt"));
                        }

                        @TestMetadata("5.1.kt")
                        public void test5_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression/p-1/neg/5.1.kt"));
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression/p-1/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression/p-1/pos/1.1.kt"));
                        }

                        @TestMetadata("3.1.kt")
                        public void test3_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression/p-1/pos/3.1.kt"));
                        }

                        @TestMetadata("3.2.kt")
                        public void test3_2() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression/p-1/pos/3.2.kt"));
                        }

                        @TestMetadata("4.1.kt")
                        public void test4_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression/p-1/pos/4.1.kt"));
                        }

                        @TestMetadata("4.2.kt")
                        public void test4_2() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression/p-1/pos/4.2.kt"));
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression/p-2")
                public abstract static class P_2 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression/p-2/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("2.1.kt")
                        public void test2_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression/p-2/pos/2.1.kt"));
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression/p-5")
                public abstract static class P_5 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression/p-5/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression/p-5/pos/1.1.kt"));
                        }

                        @TestMetadata("2.1.kt")
                        public void test2_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression/p-5/pos/2.1.kt"));
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression/p-8")
                public abstract static class P_8 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression/p-8/neg")
                    public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression/p-8/neg/1.1.kt"));
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression/p-8/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/try-expression/p-8/pos/1.1.kt"));
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/type-checking-and-containment-checking-expressions")
            public abstract static class Type_checking_and_containment_checking_expressions extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/type-checking-and-containment-checking-expressions/containment-checking-expression")
                public abstract static class Containment_checking_expression extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/type-checking-and-containment-checking-expressions/containment-checking-expression/p-5")
                    public abstract static class P_5 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/type-checking-and-containment-checking-expressions/containment-checking-expression/p-5/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("2.1.kt")
                            public void test2_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/type-checking-and-containment-checking-expressions/containment-checking-expression/p-5/pos/2.1.kt"));
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/type-checking-and-containment-checking-expressions/type-checking-expression")
                public abstract static class Type_checking_expression extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/type-checking-and-containment-checking-expressions/type-checking-expression/p-4")
                    public abstract static class P_4 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/type-checking-and-containment-checking-expressions/type-checking-expression/p-4/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/type-checking-and-containment-checking-expressions/type-checking-expression/p-4/pos/1.1.kt"));
                            }
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression")
            public abstract static class When_expression extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/exhaustive-when-expressions")
                public abstract static class Exhaustive_when_expressions extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/exhaustive-when-expressions/p-2")
                    public abstract static class P_2 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/exhaustive-when-expressions/p-2/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("11.1.kt")
                            public void test11_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/exhaustive-when-expressions/p-2/neg/11.1.kt"));
                            }

                            @TestMetadata("11.2.kt")
                            public void test11_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/exhaustive-when-expressions/p-2/neg/11.2.kt"));
                            }

                            @TestMetadata("11.3.kt")
                            public void test11_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/exhaustive-when-expressions/p-2/neg/11.3.kt"));
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/exhaustive-when-expressions/p-2/neg/1.1.kt"));
                            }

                            @TestMetadata("1.2.kt")
                            public void test1_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/exhaustive-when-expressions/p-2/neg/1.2.kt"));
                            }

                            @TestMetadata("3.1.kt")
                            public void test3_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/exhaustive-when-expressions/p-2/neg/3.1.kt"));
                            }

                            @TestMetadata("9.1.kt")
                            public void test9_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/exhaustive-when-expressions/p-2/neg/9.1.kt"));
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/exhaustive-when-expressions/p-2/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("10.1.kt")
                            public void test10_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/exhaustive-when-expressions/p-2/pos/10.1.kt"));
                            }

                            @TestMetadata("11.1.kt")
                            public void test11_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/exhaustive-when-expressions/p-2/pos/11.1.kt"));
                            }

                            @TestMetadata("11.2.kt")
                            public void test11_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/exhaustive-when-expressions/p-2/pos/11.2.kt"));
                            }

                            @TestMetadata("11.3.kt")
                            public void test11_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/exhaustive-when-expressions/p-2/pos/11.3.kt"));
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/exhaustive-when-expressions/p-2/pos/1.1.kt"));
                            }

                            @TestMetadata("1.2.kt")
                            public void test1_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/exhaustive-when-expressions/p-2/pos/1.2.kt"));
                            }

                            @TestMetadata("1.3.kt")
                            public void test1_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/exhaustive-when-expressions/p-2/pos/1.3.kt"));
                            }

                            @TestMetadata("3.1.kt")
                            public void test3_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/exhaustive-when-expressions/p-2/pos/3.1.kt"));
                            }

                            @TestMetadata("7.1.kt")
                            public void test7_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/exhaustive-when-expressions/p-2/pos/7.1.kt"));
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-1")
                public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-1/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("3.1.kt")
                        public void test3_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-1/pos/3.1.kt"));
                        }

                        @TestMetadata("3.2.kt")
                        public void test3_2() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-1/pos/3.2.kt"));
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-2")
                public abstract static class P_2 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-2/neg")
                    public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("2.1.kt")
                        public void test2_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-2/neg/2.1.kt"));
                        }

                        @TestMetadata("2.2.kt")
                        public void test2_2() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-2/neg/2.2.kt"));
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-2/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-2/pos/1.1.kt"));
                        }

                        @TestMetadata("1.2.kt")
                        public void test1_2() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-2/pos/1.2.kt"));
                        }

                        @TestMetadata("2.1.kt")
                        public void test2_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-2/pos/2.1.kt"));
                        }

                        @TestMetadata("2.2.kt")
                        public void test2_2() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-2/pos/2.2.kt"));
                        }

                        @TestMetadata("2.3.kt")
                        public void test2_3() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-2/pos/2.3.kt"));
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-3")
                public abstract static class P_3 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-3/neg")
                    public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("2.1.kt")
                        public void test2_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-3/neg/2.1.kt"));
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-4")
                public abstract static class P_4 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-4/neg")
                    public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-4/neg/1.1.kt"));
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-4/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-4/pos/1.1.kt"));
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-5")
                public abstract static class P_5 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-5/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-5/pos/1.1.kt"));
                        }

                        @TestMetadata("1.2.kt")
                        public void test1_2() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-5/pos/1.2.kt"));
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-6")
                public abstract static class P_6 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-6/neg")
                    public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-6/neg/1.1.kt"));
                        }

                        @TestMetadata("1.2.kt")
                        public void test1_2() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-6/neg/1.2.kt"));
                        }

                        @TestMetadata("3.1.kt")
                        public void test3_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-6/neg/3.1.kt"));
                        }

                        @TestMetadata("3.2.kt")
                        public void test3_2() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-6/neg/3.2.kt"));
                        }

                        @TestMetadata("7.1.kt")
                        public void test7_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-6/neg/7.1.kt"));
                        }

                        @TestMetadata("7.2.kt")
                        public void test7_2() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-6/neg/7.2.kt"));
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-6/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-6/pos/1.1.kt"));
                        }

                        @TestMetadata("1.2.kt")
                        public void test1_2() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-6/pos/1.2.kt"));
                        }

                        @TestMetadata("1.3.kt")
                        public void test1_3() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-6/pos/1.3.kt"));
                        }

                        @TestMetadata("1.4.kt")
                        public void test1_4() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-6/pos/1.4.kt"));
                        }

                        @TestMetadata("3.1.kt")
                        public void test3_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-6/pos/3.1.kt"));
                        }

                        @TestMetadata("3.2.kt")
                        public void test3_2() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-6/pos/3.2.kt"));
                        }

                        @TestMetadata("5.1.kt")
                        public void test5_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-6/pos/5.1.kt"));
                        }

                        @TestMetadata("5.2.kt")
                        public void test5_2() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-6/pos/5.2.kt"));
                        }

                        @TestMetadata("6.1.kt")
                        public void test6_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-6/pos/6.1.kt"));
                        }

                        @TestMetadata("7.1.kt")
                        public void test7_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-6/pos/7.1.kt"));
                        }

                        @TestMetadata("7.2.kt")
                        public void test7_2() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/expressions/when-expression/p-6/pos/7.2.kt"));
                        }
                    }
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution")
        public abstract static class Overload_resolution extends AbstractDiagnosisCompilerTestDataSpecTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs")
            public abstract static class Building_the_overload_candidate_set_ocs extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver")
                public abstract static class Call_with_an_explicit_receiver extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver/call-with-an-explicit-type-receiver")
                    public abstract static class Call_with_an_explicit_type_receiver extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver/call-with-an-explicit-type-receiver/p-3")
                        public abstract static class P_3 extends AbstractDiagnosisCompilerTestDataSpecTest {
                            @RunWith(JUnit3RunnerWithInners.class)
                            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver/call-with-an-explicit-type-receiver/p-3/pos")
                            public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                                private void runTest(String testDataFilePath) throws Exception {
                                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                                }

                                @TestMetadata("2.1.kt")
                                public void test2_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver/call-with-an-explicit-type-receiver/p-3/pos/2.1.kt"));
                                }
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver/p-6")
                    public abstract static class P_6 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver/p-6/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver/p-6/pos/1.1.kt"));
                            }

                            @TestMetadata("1.2.kt")
                            public void test1_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver/p-6/pos/1.2.kt"));
                            }

                            @TestMetadata("1.3.kt")
                            public void test1_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver/p-6/pos/1.3.kt"));
                            }

                            @TestMetadata("1.4.kt")
                            public void test1_4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver/p-6/pos/1.4.kt"));
                            }

                            @TestMetadata("1.5.kt")
                            public void test1_5() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver/p-6/pos/1.5.kt"));
                            }

                            @TestMetadata("2.1.kt")
                            public void test2_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver/p-6/pos/2.1.kt"));
                            }

                            @TestMetadata("2.2.kt")
                            public void test2_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver/p-6/pos/2.2.kt"));
                            }

                            @TestMetadata("2.3.kt")
                            public void test2_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver/p-6/pos/2.3.kt"));
                            }

                            @TestMetadata("2.4.kt")
                            public void test2_4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver/p-6/pos/2.4.kt"));
                            }

                            @TestMetadata("3.1.kt")
                            public void test3_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver/p-6/pos/3.1.kt"));
                            }

                            @TestMetadata("3.2.kt")
                            public void test3_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver/p-6/pos/3.2.kt"));
                            }

                            @TestMetadata("4.1.kt")
                            public void test4_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver/p-6/pos/4.1.kt"));
                            }

                            @TestMetadata("4.2.kt")
                            public void test4_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver/p-6/pos/4.2.kt"));
                            }

                            @TestMetadata("5.1.kt")
                            public void test5_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver/p-6/pos/5.1.kt"));
                            }

                            @TestMetadata("5.2.kt")
                            public void test5_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver/p-6/pos/5.2.kt"));
                            }

                            @TestMetadata("6.1.kt")
                            public void test6_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-an-explicit-receiver/p-6/pos/6.1.kt"));
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-named-parameters")
                public abstract static class Call_with_named_parameters extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-named-parameters/p-1")
                    public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-named-parameters/p-1/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("2.1.kt")
                            public void test2_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-named-parameters/p-1/pos/2.1.kt"));
                            }

                            @TestMetadata("2.10.kt")
                            public void test2_10() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-named-parameters/p-1/pos/2.10.kt"));
                            }

                            @TestMetadata("2.11.kt")
                            public void test2_11() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-named-parameters/p-1/pos/2.11.kt"));
                            }

                            @TestMetadata("2.12.kt")
                            public void test2_12() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-named-parameters/p-1/pos/2.12.kt"));
                            }

                            @TestMetadata("2.13.kt")
                            public void test2_13() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-named-parameters/p-1/pos/2.13.kt"));
                            }

                            @TestMetadata("2.14.kt")
                            public void test2_14() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-named-parameters/p-1/pos/2.14.kt"));
                            }

                            @TestMetadata("2.15.kt")
                            public void test2_15() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-named-parameters/p-1/pos/2.15.kt"));
                            }

                            @TestMetadata("2.16.kt")
                            public void test2_16() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-named-parameters/p-1/pos/2.16.kt"));
                            }

                            @TestMetadata("2.2.kt")
                            public void test2_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-named-parameters/p-1/pos/2.2.kt"));
                            }

                            @TestMetadata("2.3.kt")
                            public void test2_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-named-parameters/p-1/pos/2.3.kt"));
                            }

                            @TestMetadata("2.4.kt")
                            public void test2_4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-named-parameters/p-1/pos/2.4.kt"));
                            }

                            @TestMetadata("2.5.kt")
                            public void test2_5() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-named-parameters/p-1/pos/2.5.kt"));
                            }

                            @TestMetadata("2.6.kt")
                            public void test2_6() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-named-parameters/p-1/pos/2.6.kt"));
                            }

                            @TestMetadata("2.7.kt")
                            public void test2_7() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-named-parameters/p-1/pos/2.7.kt"));
                            }

                            @TestMetadata("2.8.kt")
                            public void test2_8() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-named-parameters/p-1/pos/2.8.kt"));
                            }

                            @TestMetadata("2.9.kt")
                            public void test2_9() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-named-parameters/p-1/pos/2.9.kt"));
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-specified-type-parameters")
                public abstract static class Call_with_specified_type_parameters extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-specified-type-parameters/p-2")
                    public abstract static class P_2 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-specified-type-parameters/p-2/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-specified-type-parameters/p-2/pos/1.1.kt"));
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-trailing-lambda-expressions")
                public abstract static class Call_with_trailing_lambda_expressions extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-trailing-lambda-expressions/p-1")
                    public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-trailing-lambda-expressions/p-1/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("2.1.kt")
                            public void test2_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-trailing-lambda-expressions/p-1/pos/2.1.kt"));
                            }

                            @TestMetadata("2.10.kt")
                            public void test2_10() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-trailing-lambda-expressions/p-1/pos/2.10.kt"));
                            }

                            @TestMetadata("2.11.kt")
                            public void test2_11() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-trailing-lambda-expressions/p-1/pos/2.11.kt"));
                            }

                            @TestMetadata("2.12.kt")
                            public void test2_12() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-trailing-lambda-expressions/p-1/pos/2.12.kt"));
                            }

                            @TestMetadata("2.13.kt")
                            public void test2_13() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-trailing-lambda-expressions/p-1/pos/2.13.kt"));
                            }

                            @TestMetadata("2.14.kt")
                            public void test2_14() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-trailing-lambda-expressions/p-1/pos/2.14.kt"));
                            }

                            @TestMetadata("2.15.kt")
                            public void test2_15() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-trailing-lambda-expressions/p-1/pos/2.15.kt"));
                            }

                            @TestMetadata("2.16.kt")
                            public void test2_16() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-trailing-lambda-expressions/p-1/pos/2.16.kt"));
                            }

                            @TestMetadata("2.17.kt")
                            public void test2_17() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-trailing-lambda-expressions/p-1/pos/2.17.kt"));
                            }

                            @TestMetadata("2.18.kt")
                            public void test2_18() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-trailing-lambda-expressions/p-1/pos/2.18.kt"));
                            }

                            @TestMetadata("2.19.kt")
                            public void test2_19() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-trailing-lambda-expressions/p-1/pos/2.19.kt"));
                            }

                            @TestMetadata("2.2.kt")
                            public void test2_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-trailing-lambda-expressions/p-1/pos/2.2.kt"));
                            }

                            @TestMetadata("2.20.kt")
                            public void test2_20() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-trailing-lambda-expressions/p-1/pos/2.20.kt"));
                            }

                            @TestMetadata("2.21.kt")
                            public void test2_21() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-trailing-lambda-expressions/p-1/pos/2.21.kt"));
                            }

                            @TestMetadata("2.3.kt")
                            public void test2_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-trailing-lambda-expressions/p-1/pos/2.3.kt"));
                            }

                            @TestMetadata("2.4.kt")
                            public void test2_4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-trailing-lambda-expressions/p-1/pos/2.4.kt"));
                            }

                            @TestMetadata("2.5.kt")
                            public void test2_5() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-trailing-lambda-expressions/p-1/pos/2.5.kt"));
                            }

                            @TestMetadata("2.6.kt")
                            public void test2_6() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-trailing-lambda-expressions/p-1/pos/2.6.kt"));
                            }

                            @TestMetadata("2.7.kt")
                            public void test2_7() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-trailing-lambda-expressions/p-1/pos/2.7.kt"));
                            }

                            @TestMetadata("2.8.kt")
                            public void test2_8() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-trailing-lambda-expressions/p-1/pos/2.8.kt"));
                            }

                            @TestMetadata("2.9.kt")
                            public void test2_9() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-with-trailing-lambda-expressions/p-1/pos/2.9.kt"));
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver")
                public abstract static class Call_without_an_explicit_receiver extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5")
                    public abstract static class P_5 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("2.3.kt")
                            public void test2_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/neg/2.3.kt"));
                            }

                            @TestMetadata("2.4.kt")
                            public void test2_4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/neg/2.4.kt"));
                            }

                            @TestMetadata("2.5.kt")
                            public void test2_5() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/neg/2.5.kt"));
                            }

                            @TestMetadata("4.1.kt")
                            public void test4_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/neg/4.1.kt"));
                            }

                            @TestMetadata("4.2.kt")
                            public void test4_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/neg/4.2.kt"));
                            }

                            @TestMetadata("6.1.kt")
                            public void test6_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/neg/6.1.kt"));
                            }

                            @TestMetadata("6.4.kt")
                            public void test6_4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/neg/6.4.kt"));
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("2.1.kt")
                            public void test2_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/pos/2.1.kt"));
                            }

                            @TestMetadata("2.2.kt")
                            public void test2_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/pos/2.2.kt"));
                            }

                            @TestMetadata("2.3.kt")
                            public void test2_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/pos/2.3.kt"));
                            }

                            @TestMetadata("2.4.kt")
                            public void test2_4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/pos/2.4.kt"));
                            }

                            @TestMetadata("2.5.kt")
                            public void test2_5() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/pos/2.5.kt"));
                            }

                            @TestMetadata("4.1.kt")
                            public void test4_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/pos/4.1.kt"));
                            }

                            @TestMetadata("4.2.kt")
                            public void test4_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/pos/4.2.kt"));
                            }

                            @TestMetadata("4.3.kt")
                            public void test4_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/pos/4.3.kt"));
                            }

                            @TestMetadata("4.4.kt")
                            public void test4_4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/pos/4.4.kt"));
                            }

                            @TestMetadata("4.5.kt")
                            public void test4_5() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/pos/4.5.kt"));
                            }

                            @TestMetadata("4.6.kt")
                            public void test4_6() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/pos/4.6.kt"));
                            }

                            @TestMetadata("5.1.kt")
                            public void test5_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/pos/5.1.kt"));
                            }

                            @TestMetadata("6.1.kt")
                            public void test6_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/pos/6.1.kt"));
                            }

                            @TestMetadata("6.2.kt")
                            public void test6_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/pos/6.2.kt"));
                            }

                            @TestMetadata("6.3.kt")
                            public void test6_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/pos/6.3.kt"));
                            }

                            @TestMetadata("7.1.kt")
                            public void test7_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/call-without-an-explicit-receiver/p-5/pos/7.1.kt"));
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call")
                public abstract static class Infix_function_call extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call/p-2")
                    public abstract static class P_2 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call/p-2/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call/p-2/neg/1.1.kt"));
                            }

                            @TestMetadata("1.2.kt")
                            public void test1_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call/p-2/neg/1.2.kt"));
                            }

                            @TestMetadata("1.3.kt")
                            public void test1_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call/p-2/neg/1.3.kt"));
                            }

                            @TestMetadata("1.4.kt")
                            public void test1_4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call/p-2/neg/1.4.kt"));
                            }

                            @TestMetadata("4.5.kt")
                            public void test4_5() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call/p-2/neg/4.5.kt"));
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call/p-2/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("4.1.kt")
                            public void test4_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call/p-2/pos/4.1.kt"));
                            }

                            @TestMetadata("4.2.kt")
                            public void test4_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call/p-2/pos/4.2.kt"));
                            }

                            @TestMetadata("4.3.kt")
                            public void test4_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call/p-2/pos/4.3.kt"));
                            }

                            @TestMetadata("4.4.kt")
                            public void test4_4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call/p-2/pos/4.4.kt"));
                            }

                            @TestMetadata("4.5.kt")
                            public void test4_5() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call/p-2/pos/4.5.kt"));
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call")
                public abstract static class Operator_call extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1")
                    public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("2.1.kt")
                            public void test2_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/neg/2.1.kt"));
                            }

                            @TestMetadata("2.2.kt")
                            public void test2_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/neg/2.2.kt"));
                            }

                            @TestMetadata("2.4.kt")
                            public void test2_4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/neg/2.4.kt"));
                            }

                            @TestMetadata("2.5.kt")
                            public void test2_5() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/neg/2.5.kt"));
                            }

                            @TestMetadata("2.6.kt")
                            public void test2_6() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/neg/2.6.kt"));
                            }

                            @TestMetadata("2.7.kt")
                            public void test2_7() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/neg/2.7.kt"));
                            }

                            @TestMetadata("2.8.kt")
                            public void test2_8() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/neg/2.8.kt"));
                            }

                            @TestMetadata("2.9.kt")
                            public void test2_9() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/neg/2.9.kt"));
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("2.1.kt")
                            public void test2_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/pos/2.1.kt"));
                            }

                            @TestMetadata("2.2.kt")
                            public void test2_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-1/pos/2.2.kt"));
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-2")
                    public abstract static class P_2 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-2/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("3.1.kt")
                            public void test3_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-2/pos/3.1.kt"));
                            }

                            @TestMetadata("3.2.kt")
                            public void test3_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-2/pos/3.2.kt"));
                            }

                            @TestMetadata("3.3.kt")
                            public void test3_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-2/pos/3.3.kt"));
                            }

                            @TestMetadata("3.4.kt")
                            public void test3_4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-2/pos/3.4.kt"));
                            }

                            @TestMetadata("3.5.kt")
                            public void test3_5() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-2/pos/3.5.kt"));
                            }

                            @TestMetadata("3.6.kt")
                            public void test3_6() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-2/pos/3.6.kt"));
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-4")
                    public abstract static class P_4 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-4/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-4/neg/1.1.kt"));
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-4/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/building-the-overload-candidate-set-ocs/operator-call/p-4/pos/1.1.kt"));
                            }
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/callables-and-invoke-convention")
            public abstract static class Callables_and_invoke_convention extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/callables-and-invoke-convention/p-2")
                public abstract static class P_2 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/callables-and-invoke-convention/p-2/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("10.1.kt")
                        public void test10_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/callables-and-invoke-convention/p-2/pos/10.1.kt"));
                        }

                        @TestMetadata("8.1.kt")
                        public void test8_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/callables-and-invoke-convention/p-2/pos/8.1.kt"));
                        }

                        @TestMetadata("9.1.kt")
                        public void test9_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/callables-and-invoke-convention/p-2/pos/9.1.kt"));
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set")
            public abstract static class Choosing_the_most_specific_candidate_from_the_overload_candidate_set extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection")
                public abstract static class Algorithm_of_msc_selection extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-11")
                    public abstract static class P_11 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-11/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-11/pos/1.1.kt"));
                            }

                            @TestMetadata("1.2.kt")
                            public void test1_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-11/pos/1.2.kt"));
                            }

                            @TestMetadata("4.1.kt")
                            public void test4_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-11/pos/4.1.kt"));
                            }

                            @TestMetadata("4.2.kt")
                            public void test4_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-11/pos/4.2.kt"));
                            }

                            @TestMetadata("4.3.kt")
                            public void test4_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-11/pos/4.3.kt"));
                            }

                            @TestMetadata("4.4.kt")
                            public void test4_4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-11/pos/4.4.kt"));
                            }

                            @TestMetadata("4.5.kt")
                            public void test4_5() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-11/pos/4.5.kt"));
                            }

                            @TestMetadata("5.1.kt")
                            public void test5_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-11/pos/5.1.kt"));
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-12")
                    public abstract static class P_12 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-12/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("2.1.kt")
                            public void test2_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-12/pos/2.1.kt"));
                            }

                            @TestMetadata("2.2.kt")
                            public void test2_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-12/pos/2.2.kt"));
                            }

                            @TestMetadata("2.3.kt")
                            public void test2_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-12/pos/2.3.kt"));
                            }

                            @TestMetadata("2.4.kt")
                            public void test2_4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-12/pos/2.4.kt"));
                            }

                            @TestMetadata("2.5.kt")
                            public void test2_5() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-12/pos/2.5.kt"));
                            }

                            @TestMetadata("2.6.kt")
                            public void test2_6() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-12/pos/2.6.kt"));
                            }

                            @TestMetadata("2.7.kt")
                            public void test2_7() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-12/pos/2.7.kt"));
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-14")
                    public abstract static class P_14 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-14/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-14/neg/1.1.kt"));
                            }

                            @TestMetadata("1.2.kt")
                            public void test1_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-14/neg/1.2.kt"));
                            }

                            @TestMetadata("1.3.kt")
                            public void test1_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-14/neg/1.3.kt"));
                            }

                            @TestMetadata("1.4.kt")
                            public void test1_4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-14/neg/1.4.kt"));
                            }

                            @TestMetadata("1.5.kt")
                            public void test1_5() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-14/neg/1.5.kt"));
                            }

                            @TestMetadata("1.6.kt")
                            public void test1_6() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-14/neg/1.6.kt"));
                            }

                            @TestMetadata("1.7.kt")
                            public void test1_7() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-14/neg/1.7.kt"));
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-17")
                    public abstract static class P_17 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-17/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("2.1.kt")
                            public void test2_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-17/neg/2.1.kt"));
                            }

                            @TestMetadata("2.2.kt")
                            public void test2_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-17/neg/2.2.kt"));
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-3")
                    public abstract static class P_3 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-3/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-3/pos/1.1.kt"));
                            }

                            @TestMetadata("1.2.kt")
                            public void test1_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-3/pos/1.2.kt"));
                            }

                            @TestMetadata("1.3.kt")
                            public void test1_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-3/pos/1.3.kt"));
                            }

                            @TestMetadata("1.4.kt")
                            public void test1_4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-3/pos/1.4.kt"));
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-9")
                    public abstract static class P_9 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-9/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("2.1.kt")
                            public void test2_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-9/neg/2.1.kt"));
                            }

                            @TestMetadata("2.2.kt")
                            public void test2_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-9/neg/2.2.kt"));
                            }

                            @TestMetadata("2.3.kt")
                            public void test2_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-9/neg/2.3.kt"));
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-9/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/algorithm-of-msc-selection/p-9/pos/1.1.kt"));
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/rationale-1")
                public abstract static class Rationale_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/rationale-1/p-2")
                    public abstract static class P_2 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/rationale-1/p-2/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/rationale-1/p-2/pos/1.1.kt"));
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/rationale-1/p-3")
                    public abstract static class P_3 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/rationale-1/p-3/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/choosing-the-most-specific-candidate-from-the-overload-candidate-set/rationale-1/p-3/neg/1.1.kt"));
                            }
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/determining-function-applicability-for-a-specific-call")
            public abstract static class Determining_function_applicability_for_a_specific_call extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/determining-function-applicability-for-a-specific-call/description")
                public abstract static class Description extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/determining-function-applicability-for-a-specific-call/description/p-2")
                    public abstract static class P_2 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/determining-function-applicability-for-a-specific-call/description/p-2/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("2.1.kt")
                            public void test2_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/determining-function-applicability-for-a-specific-call/description/p-2/neg/2.1.kt"));
                            }
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/receivers")
            public abstract static class Receivers extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/receivers/p-5")
                public abstract static class P_5 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/receivers/p-5/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("2.1.kt")
                        public void test2_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/receivers/p-5/pos/2.1.kt"));
                        }

                        @TestMetadata("3.1.kt")
                        public void test3_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/receivers/p-5/pos/3.1.kt"));
                        }

                        @TestMetadata("5.1.kt")
                        public void test5_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/receivers/p-5/pos/5.1.kt"));
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references")
            public abstract static class Resolving_callable_references extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/bidirectional-resolution-for-callable-calls")
                public abstract static class Bidirectional_resolution_for_callable_calls extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/bidirectional-resolution-for-callable-calls/p-1")
                    public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/bidirectional-resolution-for-callable-calls/p-1/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/bidirectional-resolution-for-callable-calls/p-1/pos/1.1.kt"));
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/bidirectional-resolution-for-callable-calls/p-3")
                    public abstract static class P_3 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/bidirectional-resolution-for-callable-calls/p-3/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/bidirectional-resolution-for-callable-calls/p-3/neg/1.1.kt"));
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/bidirectional-resolution-for-callable-calls/p-3/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/bidirectional-resolution-for-callable-calls/p-3/pos/1.1.kt"));
                            }

                            @TestMetadata("1.2.kt")
                            public void test1_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/bidirectional-resolution-for-callable-calls/p-3/pos/1.2.kt"));
                            }

                            @TestMetadata("1.3.kt")
                            public void test1_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/bidirectional-resolution-for-callable-calls/p-3/pos/1.3.kt"));
                            }

                            @TestMetadata("1.4.kt")
                            public void test1_4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/bidirectional-resolution-for-callable-calls/p-3/pos/1.4.kt"));
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/p-2")
                public abstract static class P_2 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/p-2/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("2.1.kt")
                        public void test2_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/p-2/pos/2.1.kt"));
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/resolving-callable-references-not-used-as-arguments-to-a-call")
                public abstract static class Resolving_callable_references_not_used_as_arguments_to_a_call extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/resolving-callable-references-not-used-as-arguments-to-a-call/p-1")
                    public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/resolving-callable-references-not-used-as-arguments-to-a-call/p-1/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/resolving-callable-references-not-used-as-arguments-to-a-call/p-1/neg/1.1.kt"));
                            }

                            @TestMetadata("1.2.kt")
                            public void test1_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/resolving-callable-references-not-used-as-arguments-to-a-call/p-1/neg/1.2.kt"));
                            }

                            @TestMetadata("1.3.kt")
                            public void test1_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/resolving-callable-references-not-used-as-arguments-to-a-call/p-1/neg/1.3.kt"));
                            }

                            @TestMetadata("1.4.kt")
                            public void test1_4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/resolving-callable-references-not-used-as-arguments-to-a-call/p-1/neg/1.4.kt"));
                            }

                            @TestMetadata("1.5.kt")
                            public void test1_5() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/resolving-callable-references-not-used-as-arguments-to-a-call/p-1/neg/1.5.kt"));
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/resolving-callable-references-not-used-as-arguments-to-a-call/p-1/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/resolving-callable-references-not-used-as-arguments-to-a-call/p-1/pos/1.1.kt"));
                            }

                            @TestMetadata("1.2.kt")
                            public void test1_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/resolving-callable-references-not-used-as-arguments-to-a-call/p-1/pos/1.2.kt"));
                            }

                            @TestMetadata("1.3.kt")
                            public void test1_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/overload-resolution/resolving-callable-references/resolving-callable-references-not-used-as-arguments-to-a-call/p-1/pos/1.3.kt"));
                            }
                        }
                    }
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/statements")
        public abstract static class Statements extends AbstractDiagnosisCompilerTestDataSpecTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/statements/assignments")
            public abstract static class Assignments extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/statements/assignments/operator-assignments")
                public abstract static class Operator_assignments extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/statements/assignments/operator-assignments/p-2")
                    public abstract static class P_2 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/statements/assignments/operator-assignments/p-2/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/statements/assignments/operator-assignments/p-2/neg/1.1.kt"));
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/statements/assignments/operator-assignments/p-2/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/statements/assignments/operator-assignments/p-2/pos/1.1.kt"));
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/statements/assignments/p-1")
                public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/statements/assignments/p-1/neg")
                    public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("2.1.kt")
                        public void test2_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/statements/assignments/p-1/neg/2.1.kt"));
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/statements/assignments/p-2")
                public abstract static class P_2 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/statements/assignments/p-2/neg")
                    public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/statements/assignments/p-2/neg/1.1.kt"));
                        }

                        @TestMetadata("1.2.kt")
                        public void test1_2() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/statements/assignments/p-2/neg/1.2.kt"));
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/statements/loop-statements")
            public abstract static class Loop_statements extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/statements/loop-statements/do-while-loop-statement")
                public abstract static class Do_while_loop_statement extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/statements/loop-statements/do-while-loop-statement/p-1")
                    public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/statements/loop-statements/do-while-loop-statement/p-1/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/statements/loop-statements/do-while-loop-statement/p-1/pos/1.1.kt"));
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/statements/loop-statements/do-while-loop-statement/p-3")
                    public abstract static class P_3 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/statements/loop-statements/do-while-loop-statement/p-3/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/statements/loop-statements/do-while-loop-statement/p-3/neg/1.1.kt"));
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/statements/loop-statements/while-loop-statement")
                public abstract static class While_loop_statement extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/statements/loop-statements/while-loop-statement/p-1")
                    public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/statements/loop-statements/while-loop-statement/p-1/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/statements/loop-statements/while-loop-statement/p-1/pos/1.1.kt"));
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/statements/loop-statements/while-loop-statement/p-3")
                    public abstract static class P_3 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/statements/loop-statements/while-loop-statement/p-3/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/statements/loop-statements/while-loop-statement/p-3/neg/1.1.kt"));
                            }
                        }
                    }
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-inference")
        public abstract static class Type_inference extends AbstractDiagnosisCompilerTestDataSpecTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-inference/smart-casts")
            public abstract static class Smart_casts extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-inference/smart-casts/smart-cast-sink-stability")
                public abstract static class Smart_cast_sink_stability extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-inference/smart-casts/smart-cast-sink-stability/p-5")
                    public abstract static class P_5 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-inference/smart-casts/smart-cast-sink-stability/p-5/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/type-inference/smart-casts/smart-cast-sink-stability/p-5/neg/1.1.kt"));
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-inference/smart-casts/smart-cast-sink-stability/p-5/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/type-inference/smart-casts/smart-cast-sink-stability/p-5/pos/1.1.kt"));
                            }
                        }
                    }
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system")
        public abstract static class Type_system extends AbstractDiagnosisCompilerTestDataSpecTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/introduction-1")
            public abstract static class Introduction_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/introduction-1/p-6")
                public abstract static class P_6 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/introduction-1/p-6/neg")
                    public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("2.1.kt")
                        public void test2_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/type-system/introduction-1/p-6/neg/2.1.kt"));
                        }

                        @TestMetadata("2.2.kt")
                        public void test2_2() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/type-system/introduction-1/p-6/neg/2.2.kt"));
                        }

                        @TestMetadata("2.3.kt")
                        public void test2_3() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/type-system/introduction-1/p-6/neg/2.3.kt"));
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/introduction-1/p-8")
                public abstract static class P_8 extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/introduction-1/p-8/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.1.kt")
                        public void test1_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/type-system/introduction-1/p-8/pos/1.1.kt"));
                        }

                        @TestMetadata("2.1.kt")
                        public void test2_1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/type-system/introduction-1/p-8/pos/2.1.kt"));
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/subtyping")
            public abstract static class Subtyping extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/subtyping/subtyping-for-intersection-types")
                public abstract static class Subtyping_for_intersection_types extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/subtyping/subtyping-for-intersection-types/p-1")
                    public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/subtyping/subtyping-for-intersection-types/p-1/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/type-system/subtyping/subtyping-for-intersection-types/p-1/pos/1.1.kt"));
                            }

                            @TestMetadata("1.2.kt")
                            public void test1_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/type-system/subtyping/subtyping-for-intersection-types/p-1/pos/1.2.kt"));
                            }

                            @TestMetadata("1.3.kt")
                            public void test1_3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/type-system/subtyping/subtyping-for-intersection-types/p-1/pos/1.3.kt"));
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/subtyping/subtyping-rules")
                public abstract static class Subtyping_rules extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/subtyping/subtyping-rules/p-2")
                    public abstract static class P_2 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/subtyping/subtyping-rules/p-2/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/type-system/subtyping/subtyping-rules/p-2/pos/1.1.kt"));
                            }
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/type-contexts-and-scopes")
            public abstract static class Type_contexts_and_scopes extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/type-contexts-and-scopes/inner-and-nested-type-contexts")
                public abstract static class Inner_and_nested_type_contexts extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/type-contexts-and-scopes/inner-and-nested-type-contexts/p-1")
                    public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/type-contexts-and-scopes/inner-and-nested-type-contexts/p-1/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/type-system/type-contexts-and-scopes/inner-and-nested-type-contexts/p-1/neg/1.1.kt"));
                            }

                            @TestMetadata("1.2.kt")
                            public void test1_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/type-system/type-contexts-and-scopes/inner-and-nested-type-contexts/p-1/neg/1.2.kt"));
                            }

                            @TestMetadata("2.1.kt")
                            public void test2_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/type-system/type-contexts-and-scopes/inner-and-nested-type-contexts/p-1/neg/2.1.kt"));
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/type-contexts-and-scopes/inner-and-nested-type-contexts/p-1/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.1.kt")
                            public void test1_1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/type-system/type-contexts-and-scopes/inner-and-nested-type-contexts/p-1/pos/1.1.kt"));
                            }

                            @TestMetadata("1.2.kt")
                            public void test1_2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/type-system/type-contexts-and-scopes/inner-and-nested-type-contexts/p-1/pos/1.2.kt"));
                            }
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/type-kinds")
            public abstract static class Type_kinds extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/type-kinds/built-in-types")
                public abstract static class Built_in_types extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/type-kinds/built-in-types/kotlin.any")
                    public abstract static class Kotlin_any extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/type-kinds/built-in-types/kotlin.any/p-1")
                        public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                            @RunWith(JUnit3RunnerWithInners.class)
                            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/type-kinds/built-in-types/kotlin.any/p-1/pos")
                            public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                                private void runTest(String testDataFilePath) throws Exception {
                                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                                }

                                @TestMetadata("1.1.kt")
                                public void test1_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/type-system/type-kinds/built-in-types/kotlin.any/p-1/pos/1.1.kt"));
                                }

                                @TestMetadata("1.2.kt")
                                public void test1_2() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/type-system/type-kinds/built-in-types/kotlin.any/p-1/pos/1.2.kt"));
                                }
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/type-kinds/built-in-types/kotlin.nothing")
                    public abstract static class Kotlin_nothing extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/type-kinds/built-in-types/kotlin.nothing/p-1")
                        public abstract static class P_1 extends AbstractDiagnosisCompilerTestDataSpecTest {
                            @RunWith(JUnit3RunnerWithInners.class)
                            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/type-kinds/built-in-types/kotlin.nothing/p-1/neg")
                            public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                                private void runTest(String testDataFilePath) throws Exception {
                                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                                }

                                @TestMetadata("2.1.kt")
                                public void test2_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/type-system/type-kinds/built-in-types/kotlin.nothing/p-1/neg/2.1.kt"));
                                }
                            }

                            @RunWith(JUnit3RunnerWithInners.class)
                            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/linked/type-system/type-kinds/built-in-types/kotlin.nothing/p-1/pos")
                            public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                                private void runTest(String testDataFilePath) throws Exception {
                                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                                }

                                @TestMetadata("1.1.kt")
                                public void test1_1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/type-system/type-kinds/built-in-types/kotlin.nothing/p-1/pos/1.1.kt"));
                                }

                                @TestMetadata("1.2.kt")
                                public void test1_2() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/linked/type-system/type-kinds/built-in-types/kotlin.nothing/p-1/pos/1.2.kt"));
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    @RunWith(JUnit3RunnerWithInners.class)
    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked")
    public abstract static class NotLinked extends AbstractDiagnosisCompilerTestDataSpecTest {
        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/annotations")
        public abstract static class Annotations extends AbstractDiagnosisCompilerTestDataSpecTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/annotations/annotation-classes")
            public abstract static class Annotation_classes extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/annotations/annotation-classes/neg")
                public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                    private void runTest(String testDataFilePath) throws Exception {
                        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                    }

                    @TestMetadata("1.kt")
                    public void test1() throws Exception {
                        runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/annotations/annotation-classes/neg/1.kt"));
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/annotations/type-annotations")
            public abstract static class Type_annotations extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/annotations/type-annotations/neg")
                public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                    private void runTest(String testDataFilePath) throws Exception {
                        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                    }

                    @TestMetadata("1.kt")
                    public void test1() throws Exception {
                        runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/annotations/type-annotations/neg/1.kt"));
                    }

                    @TestMetadata("10.kt")
                    public void test10() throws Exception {
                        runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/annotations/type-annotations/neg/10.kt"));
                    }

                    @TestMetadata("11.kt")
                    public void test11() throws Exception {
                        runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/annotations/type-annotations/neg/11.kt"));
                    }

                    @TestMetadata("2.kt")
                    public void test2() throws Exception {
                        runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/annotations/type-annotations/neg/2.kt"));
                    }

                    @TestMetadata("3.kt")
                    public void test3() throws Exception {
                        runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/annotations/type-annotations/neg/3.kt"));
                    }

                    @TestMetadata("4.kt")
                    public void test4() throws Exception {
                        runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/annotations/type-annotations/neg/4.kt"));
                    }

                    @TestMetadata("5.kt")
                    public void test5() throws Exception {
                        runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/annotations/type-annotations/neg/5.kt"));
                    }

                    @TestMetadata("6.kt")
                    public void test6() throws Exception {
                        runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/annotations/type-annotations/neg/6.kt"));
                    }

                    @TestMetadata("7.kt")
                    public void test7() throws Exception {
                        runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/annotations/type-annotations/neg/7.kt"));
                    }

                    @TestMetadata("8.kt")
                    public void test8() throws Exception {
                        runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/annotations/type-annotations/neg/8.kt"));
                    }

                    @TestMetadata("9.kt")
                    public void test9() throws Exception {
                        runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/annotations/type-annotations/neg/9.kt"));
                    }
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/coercion-to-unit")
        public abstract static class Coercion_to_unit extends AbstractDiagnosisCompilerTestDataSpecTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/coercion-to-unit/neg")
            public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("1.kt")
                public void test1() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/coercion-to-unit/neg/1.kt"));
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts")
        public abstract static class Contracts extends AbstractDiagnosisCompilerTestDataSpecTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis")
            public abstract static class Analysis extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/common")
                public abstract static class Common extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/common/neg")
                    public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.kt")
                        public void test1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/common/neg/1.kt"));
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/common/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.kt")
                        public void test1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/common/pos/1.kt"));
                        }

                        @TestMetadata("2.kt")
                        public void test2() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/common/pos/2.kt"));
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow")
                public abstract static class ControlFlow extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/initialization")
                    public abstract static class Initialization extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/initialization/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.kt")
                            public void test1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/initialization/neg/1.kt"));
                            }

                            @TestMetadata("2.kt")
                            public void test2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/initialization/neg/2.kt"));
                            }

                            @TestMetadata("3.kt")
                            public void test3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/initialization/neg/3.kt"));
                            }

                            @TestMetadata("4.kt")
                            public void test4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/initialization/neg/4.kt"));
                            }

                            @TestMetadata("5.kt")
                            public void test5() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/initialization/neg/5.kt"));
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/initialization/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.kt")
                            public void test1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/initialization/pos/1.kt"));
                            }

                            @TestMetadata("2.kt")
                            public void test2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/initialization/pos/2.kt"));
                            }

                            @TestMetadata("3.kt")
                            public void test3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/initialization/pos/3.kt"));
                            }

                            @TestMetadata("4.kt")
                            public void test4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/initialization/pos/4.kt"));
                            }

                            @TestMetadata("5.kt")
                            public void test5() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/initialization/pos/5.kt"));
                            }

                            @TestMetadata("6.kt")
                            public void test6() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/initialization/pos/6.kt"));
                            }

                            @TestMetadata("7.kt")
                            public void test7() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/initialization/pos/7.kt"));
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/unreachableCode")
                    public abstract static class UnreachableCode extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/unreachableCode/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.kt")
                            public void test1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/unreachableCode/neg/1.kt"));
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/unreachableCode/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.kt")
                            public void test1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/unreachableCode/pos/1.kt"));
                            }

                            @TestMetadata("2.kt")
                            public void test2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/unreachableCode/pos/2.kt"));
                            }

                            @TestMetadata("3.kt")
                            public void test3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/unreachableCode/pos/3.kt"));
                            }

                            @TestMetadata("4.kt")
                            public void test4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/unreachableCode/pos/4.kt"));
                            }

                            @TestMetadata("5.kt")
                            public void test5() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/unreachableCode/pos/5.kt"));
                            }

                            @TestMetadata("6.kt")
                            public void test6() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/unreachableCode/pos/6.kt"));
                            }

                            @TestMetadata("7.kt")
                            public void test7() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/controlFlow/unreachableCode/pos/7.kt"));
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts")
                public abstract static class Smartcasts extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/neg")
                    public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.kt")
                        public void test1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/neg/1.kt"));
                        }

                        @TestMetadata("10.kt")
                        public void test10() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/neg/10.kt"));
                        }

                        @TestMetadata("11.kt")
                        public void test11() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/neg/11.kt"));
                        }

                        @TestMetadata("12.kt")
                        public void test12() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/neg/12.kt"));
                        }

                        @TestMetadata("13.kt")
                        public void test13() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/neg/13.kt"));
                        }

                        @TestMetadata("14.kt")
                        public void test14() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/neg/14.kt"));
                        }

                        @TestMetadata("15.kt")
                        public void test15() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/neg/15.kt"));
                        }

                        @TestMetadata("2.kt")
                        public void test2() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/neg/2.kt"));
                        }

                        @TestMetadata("3.kt")
                        public void test3() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/neg/3.kt"));
                        }

                        @TestMetadata("4.kt")
                        public void test4() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/neg/4.kt"));
                        }

                        @TestMetadata("5.kt")
                        public void test5() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/neg/5.kt"));
                        }

                        @TestMetadata("6.kt")
                        public void test6() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/neg/6.kt"));
                        }

                        @TestMetadata("7.kt")
                        public void test7() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/neg/7.kt"));
                        }

                        @TestMetadata("8.kt")
                        public void test8() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/neg/8.kt"));
                        }

                        @TestMetadata("9.kt")
                        public void test9() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/neg/9.kt"));
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.kt")
                        public void test1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/pos/1.kt"));
                        }

                        @TestMetadata("10.kt")
                        public void test10() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/pos/10.kt"));
                        }

                        @TestMetadata("11.kt")
                        public void test11() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/pos/11.kt"));
                        }

                        @TestMetadata("12.kt")
                        public void test12() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/pos/12.kt"));
                        }

                        @TestMetadata("13.kt")
                        public void test13() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/pos/13.kt"));
                        }

                        @TestMetadata("14.kt")
                        public void test14() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/pos/14.kt"));
                        }

                        @TestMetadata("2.kt")
                        public void test2() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/pos/2.kt"));
                        }

                        @TestMetadata("3.kt")
                        public void test3() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/pos/3.kt"));
                        }

                        @TestMetadata("4.kt")
                        public void test4() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/pos/4.kt"));
                        }

                        @TestMetadata("5.kt")
                        public void test5() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/pos/5.kt"));
                        }

                        @TestMetadata("6.kt")
                        public void test6() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/pos/6.kt"));
                        }

                        @TestMetadata("7.kt")
                        public void test7() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/pos/7.kt"));
                        }

                        @TestMetadata("8.kt")
                        public void test8() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/pos/8.kt"));
                        }

                        @TestMetadata("9.kt")
                        public void test9() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/analysis/smartcasts/pos/9.kt"));
                        }
                    }
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations")
            public abstract static class Declarations extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder")
                public abstract static class ContractBuilder extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/common")
                    public abstract static class Common extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/common/neg")
                        public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.kt")
                            public void test1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/common/neg/1.kt"));
                            }

                            @TestMetadata("10.kt")
                            public void test10() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/common/neg/10.kt"));
                            }

                            @TestMetadata("11.kt")
                            public void test11() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/common/neg/11.kt"));
                            }

                            @TestMetadata("12.kt")
                            public void test12() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/common/neg/12.kt"));
                            }

                            @TestMetadata("13.kt")
                            public void test13() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/common/neg/13.kt"));
                            }

                            @TestMetadata("14.kt")
                            public void test14() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/common/neg/14.kt"));
                            }

                            @TestMetadata("15.kt")
                            public void test15() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/common/neg/15.kt"));
                            }

                            @TestMetadata("16.kt")
                            public void test16() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/common/neg/16.kt"));
                            }

                            @TestMetadata("17.kt")
                            public void test17() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/common/neg/17.kt"));
                            }

                            @TestMetadata("19.kt")
                            public void test19() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/common/neg/19.kt"));
                            }

                            @TestMetadata("2.kt")
                            public void test2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/common/neg/2.kt"));
                            }

                            @TestMetadata("3.kt")
                            public void test3() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/common/neg/3.kt"));
                            }

                            @TestMetadata("4.kt")
                            public void test4() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/common/neg/4.kt"));
                            }

                            @TestMetadata("5.kt")
                            public void test5() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/common/neg/5.kt"));
                            }

                            @TestMetadata("6.kt")
                            public void test6() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/common/neg/6.kt"));
                            }

                            @TestMetadata("7.kt")
                            public void test7() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/common/neg/7.kt"));
                            }

                            @TestMetadata("8.kt")
                            public void test8() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/common/neg/8.kt"));
                            }

                            @TestMetadata("9.kt")
                            public void test9() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/common/neg/9.kt"));
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/common/pos")
                        public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                            private void runTest(String testDataFilePath) throws Exception {
                                KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                            }

                            @TestMetadata("1.kt")
                            public void test1() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/common/pos/1.kt"));
                            }

                            @TestMetadata("2.kt")
                            public void test2() throws Exception {
                                runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/common/pos/2.kt"));
                            }
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects")
                    public abstract static class Effects extends AbstractDiagnosisCompilerTestDataSpecTest {
                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/callsInPlace")
                        public abstract static class CallsInPlace extends AbstractDiagnosisCompilerTestDataSpecTest {
                            @RunWith(JUnit3RunnerWithInners.class)
                            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/callsInPlace/neg")
                            public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                                private void runTest(String testDataFilePath) throws Exception {
                                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                                }

                                @TestMetadata("1.kt")
                                public void test1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/callsInPlace/neg/1.kt"));
                                }

                                @TestMetadata("2.kt")
                                public void test2() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/callsInPlace/neg/2.kt"));
                                }
                            }

                            @RunWith(JUnit3RunnerWithInners.class)
                            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/callsInPlace/pos")
                            public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                                private void runTest(String testDataFilePath) throws Exception {
                                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                                }

                                @TestMetadata("1.kt")
                                public void test1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/callsInPlace/pos/1.kt"));
                                }

                                @TestMetadata("2.kt")
                                public void test2() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/callsInPlace/pos/2.kt"));
                                }

                                @TestMetadata("3.kt")
                                public void test3() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/callsInPlace/pos/3.kt"));
                                }
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/common")
                        public abstract static class Common extends AbstractDiagnosisCompilerTestDataSpecTest {
                            @RunWith(JUnit3RunnerWithInners.class)
                            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/common/neg")
                            public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                                private void runTest(String testDataFilePath) throws Exception {
                                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                                }

                                @TestMetadata("1.kt")
                                public void test1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/common/neg/1.kt"));
                                }
                            }
                        }

                        @RunWith(JUnit3RunnerWithInners.class)
                        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/returns")
                        public abstract static class Returns extends AbstractDiagnosisCompilerTestDataSpecTest {
                            @RunWith(JUnit3RunnerWithInners.class)
                            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/returns/neg")
                            public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                                private void runTest(String testDataFilePath) throws Exception {
                                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                                }

                                @TestMetadata("1.kt")
                                public void test1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/returns/neg/1.kt"));
                                }

                                @TestMetadata("2.kt")
                                public void test2() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/returns/neg/2.kt"));
                                }

                                @TestMetadata("3.kt")
                                public void test3() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/returns/neg/3.kt"));
                                }

                                @TestMetadata("4.kt")
                                public void test4() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/returns/neg/4.kt"));
                                }

                                @TestMetadata("5.kt")
                                public void test5() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/returns/neg/5.kt"));
                                }

                                @TestMetadata("6.kt")
                                public void test6() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/returns/neg/6.kt"));
                                }

                                @TestMetadata("7.kt")
                                public void test7() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/returns/neg/7.kt"));
                                }
                            }

                            @RunWith(JUnit3RunnerWithInners.class)
                            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/returns/pos")
                            public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                                private void runTest(String testDataFilePath) throws Exception {
                                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                                }

                                @TestMetadata("1.kt")
                                public void test1() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/returns/pos/1.kt"));
                                }

                                @TestMetadata("2.kt")
                                public void test2() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/returns/pos/2.kt"));
                                }

                                @TestMetadata("3.kt")
                                public void test3() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/returns/pos/3.kt"));
                                }

                                @TestMetadata("4.kt")
                                public void test4() throws Exception {
                                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractBuilder/effects/returns/pos/4.kt"));
                                }
                            }
                        }
                    }
                }

                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractFunction")
                public abstract static class ContractFunction extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractFunction/neg")
                    public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.kt")
                        public void test1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractFunction/neg/1.kt"));
                        }

                        @TestMetadata("2.kt")
                        public void test2() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractFunction/neg/2.kt"));
                        }

                        @TestMetadata("3.kt")
                        public void test3() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractFunction/neg/3.kt"));
                        }

                        @TestMetadata("4.kt")
                        public void test4() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractFunction/neg/4.kt"));
                        }
                    }

                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractFunction/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.kt")
                        public void test1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractFunction/pos/1.kt"));
                        }

                        @TestMetadata("2.kt")
                        public void test2() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/contracts/declarations/contractFunction/pos/2.kt"));
                        }
                    }
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/dfa")
        public abstract static class Dfa extends AbstractDiagnosisCompilerTestDataSpecTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg")
            public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("1.kt")
                public void test1() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/1.kt"));
                }

                @TestMetadata("10.kt")
                public void test10() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/10.kt"));
                }

                @TestMetadata("11.kt")
                public void test11() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/11.kt"));
                }

                @TestMetadata("12.kt")
                public void test12() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/12.kt"));
                }

                @TestMetadata("13.kt")
                public void test13() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/13.kt"));
                }

                @TestMetadata("14.kt")
                public void test14() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/14.kt"));
                }

                @TestMetadata("15.kt")
                public void test15() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/15.kt"));
                }

                @TestMetadata("16.kt")
                public void test16() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/16.kt"));
                }

                @TestMetadata("17.kt")
                public void test17() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/17.kt"));
                }

                @TestMetadata("18.kt")
                public void test18() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/18.kt"));
                }

                @TestMetadata("19.kt")
                public void test19() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/19.kt"));
                }

                @TestMetadata("2.kt")
                public void test2() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/2.kt"));
                }

                @TestMetadata("20.kt")
                public void test20() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/20.kt"));
                }

                @TestMetadata("21.kt")
                public void test21() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/21.kt"));
                }

                @TestMetadata("22.kt")
                public void test22() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/22.kt"));
                }

                @TestMetadata("23.kt")
                public void test23() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/23.kt"));
                }

                @TestMetadata("24.kt")
                public void test24() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/24.kt"));
                }

                @TestMetadata("25.kt")
                public void test25() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/25.kt"));
                }

                @TestMetadata("26.kt")
                public void test26() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/26.kt"));
                }

                @TestMetadata("27.kt")
                public void test27() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/27.kt"));
                }

                @TestMetadata("28.kt")
                public void test28() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/28.kt"));
                }

                @TestMetadata("29.kt")
                public void test29() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/29.kt"));
                }

                @TestMetadata("3.kt")
                public void test3() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/3.kt"));
                }

                @TestMetadata("30.kt")
                public void test30() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/30.kt"));
                }

                @TestMetadata("31.kt")
                public void test31() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/31.kt"));
                }

                @TestMetadata("32.kt")
                public void test32() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/32.kt"));
                }

                @TestMetadata("33.kt")
                public void test33() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/33.kt"));
                }

                @TestMetadata("34.kt")
                public void test34() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/34.kt"));
                }

                @TestMetadata("35.kt")
                public void test35() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/35.kt"));
                }

                @TestMetadata("36.kt")
                public void test36() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/36.kt"));
                }

                @TestMetadata("37.kt")
                public void test37() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/37.kt"));
                }

                @TestMetadata("38.kt")
                public void test38() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/38.kt"));
                }

                @TestMetadata("39.kt")
                public void test39() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/39.kt"));
                }

                @TestMetadata("4.kt")
                public void test4() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/4.kt"));
                }

                @TestMetadata("40.kt")
                public void test40() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/40.kt"));
                }

                @TestMetadata("41.kt")
                public void test41() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/41.kt"));
                }

                @TestMetadata("42.kt")
                public void test42() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/42.kt"));
                }

                @TestMetadata("43.kt")
                public void test43() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/43.kt"));
                }

                @TestMetadata("44.kt")
                public void test44() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/44.kt"));
                }

                @TestMetadata("45.kt")
                public void test45() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/45.kt"));
                }

                @TestMetadata("5.kt")
                public void test5() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/5.kt"));
                }

                @TestMetadata("6.kt")
                public void test6() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/6.kt"));
                }

                @TestMetadata("7.kt")
                public void test7() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/7.kt"));
                }

                @TestMetadata("8.kt")
                public void test8() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/8.kt"));
                }

                @TestMetadata("9.kt")
                public void test9() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/neg/9.kt"));
                }
            }

            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos")
            public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                }

                @TestMetadata("1.kt")
                public void test1() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/1.kt"));
                }

                @TestMetadata("10.kt")
                public void test10() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/10.kt"));
                }

                @TestMetadata("11.kt")
                public void test11() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/11.kt"));
                }

                @TestMetadata("12.kt")
                public void test12() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/12.kt"));
                }

                @TestMetadata("13.kt")
                public void test13() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/13.kt"));
                }

                @TestMetadata("14.kt")
                public void test14() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/14.kt"));
                }

                @TestMetadata("15.kt")
                public void test15() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/15.kt"));
                }

                @TestMetadata("16.kt")
                public void test16() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/16.kt"));
                }

                @TestMetadata("17.kt")
                public void test17() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/17.kt"));
                }

                @TestMetadata("18.kt")
                public void test18() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/18.kt"));
                }

                @TestMetadata("19.kt")
                public void test19() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/19.kt"));
                }

                @TestMetadata("2.kt")
                public void test2() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/2.kt"));
                }

                @TestMetadata("20.kt")
                public void test20() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/20.kt"));
                }

                @TestMetadata("21.kt")
                public void test21() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/21.kt"));
                }

                @TestMetadata("22.kt")
                public void test22() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/22.kt"));
                }

                @TestMetadata("23.kt")
                public void test23() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/23.kt"));
                }

                @TestMetadata("24.kt")
                public void test24() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/24.kt"));
                }

                @TestMetadata("25.kt")
                public void test25() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/25.kt"));
                }

                @TestMetadata("26.kt")
                public void test26() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/26.kt"));
                }

                @TestMetadata("27.kt")
                public void test27() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/27.kt"));
                }

                @TestMetadata("28.kt")
                public void test28() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/28.kt"));
                }

                @TestMetadata("29.kt")
                public void test29() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/29.kt"));
                }

                @TestMetadata("3.kt")
                public void test3() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/3.kt"));
                }

                @TestMetadata("30.kt")
                public void test30() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/30.kt"));
                }

                @TestMetadata("31.kt")
                public void test31() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/31.kt"));
                }

                @TestMetadata("32.kt")
                public void test32() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/32.kt"));
                }

                @TestMetadata("33.kt")
                public void test33() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/33.kt"));
                }

                @TestMetadata("34.kt")
                public void test34() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/34.kt"));
                }

                @TestMetadata("35.kt")
                public void test35() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/35.kt"));
                }

                @TestMetadata("36.kt")
                public void test36() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/36.kt"));
                }

                @TestMetadata("37.kt")
                public void test37() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/37.kt"));
                }

                @TestMetadata("38.kt")
                public void test38() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/38.kt"));
                }

                @TestMetadata("39.kt")
                public void test39() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/39.kt"));
                }

                @TestMetadata("4.kt")
                public void test4() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/4.kt"));
                }

                @TestMetadata("40.kt")
                public void test40() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/40.kt"));
                }

                @TestMetadata("41.kt")
                public void test41() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/41.kt"));
                }

                @TestMetadata("42.kt")
                public void test42() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/42.kt"));
                }

                @TestMetadata("43.kt")
                public void test43() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/43.kt"));
                }

                @TestMetadata("44.kt")
                public void test44() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/44.kt"));
                }

                @TestMetadata("45.kt")
                public void test45() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/45.kt"));
                }

                @TestMetadata("46.kt")
                public void test46() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/46.kt"));
                }

                @TestMetadata("47.kt")
                public void test47() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/47.kt"));
                }

                @TestMetadata("48.kt")
                public void test48() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/48.kt"));
                }

                @TestMetadata("49.kt")
                public void test49() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/49.kt"));
                }

                @TestMetadata("5.kt")
                public void test5() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/5.kt"));
                }

                @TestMetadata("50.kt")
                public void test50() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/50.kt"));
                }

                @TestMetadata("51.kt")
                public void test51() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/51.kt"));
                }

                @TestMetadata("52.kt")
                public void test52() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/52.kt"));
                }

                @TestMetadata("53.kt")
                public void test53() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/53.kt"));
                }

                @TestMetadata("54.kt")
                public void test54() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/54.kt"));
                }

                @TestMetadata("55.kt")
                public void test55() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/55.kt"));
                }

                @TestMetadata("56.kt")
                public void test56() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/56.kt"));
                }

                @TestMetadata("57.kt")
                public void test57() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/57.kt"));
                }

                @TestMetadata("58.kt")
                public void test58() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/58.kt"));
                }

                @TestMetadata("59.kt")
                public void test59() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/59.kt"));
                }

                @TestMetadata("6.kt")
                public void test6() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/6.kt"));
                }

                @TestMetadata("60.kt")
                public void test60() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/60.kt"));
                }

                @TestMetadata("61.kt")
                public void test61() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/61.kt"));
                }

                @TestMetadata("62.kt")
                public void test62() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/62.kt"));
                }

                @TestMetadata("63.kt")
                public void test63() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/63.kt"));
                }

                @TestMetadata("64.kt")
                public void test64() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/64.kt"));
                }

                @TestMetadata("65.kt")
                public void test65() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/65.kt"));
                }

                @TestMetadata("66.kt")
                public void test66() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/66.kt"));
                }

                @TestMetadata("67.kt")
                public void test67() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/67.kt"));
                }

                @TestMetadata("68.kt")
                public void test68() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/68.kt"));
                }

                @TestMetadata("69.kt")
                public void test69() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/69.kt"));
                }

                @TestMetadata("7.kt")
                public void test7() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/7.kt"));
                }

                @TestMetadata("70.kt")
                public void test70() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/70.kt"));
                }

                @TestMetadata("71.kt")
                public void test71() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/71.kt"));
                }

                @TestMetadata("72.kt")
                public void test72() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/72.kt"));
                }

                @TestMetadata("73.kt")
                public void test73() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/73.kt"));
                }

                @TestMetadata("8.kt")
                public void test8() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/8.kt"));
                }

                @TestMetadata("9.kt")
                public void test9() throws Exception {
                    runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/dfa/pos/9.kt"));
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/local-variables")
        public abstract static class Local_variables extends AbstractDiagnosisCompilerTestDataSpecTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/local-variables/type-parameters")
            public abstract static class Type_parameters extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/local-variables/type-parameters/neg")
                public static class Neg extends AbstractDiagnosisCompilerTestDataSpecTest {
                    private void runTest(String testDataFilePath) throws Exception {
                        KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                    }

                    @TestMetadata("1.kt")
                    public void test1() throws Exception {
                        runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/local-variables/type-parameters/neg/1.kt"));
                    }
                }
            }
        }

        @RunWith(JUnit3RunnerWithInners.class)
        @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/overload-resolution")
        public abstract static class Overload_resolution extends AbstractDiagnosisCompilerTestDataSpecTest {
            @RunWith(JUnit3RunnerWithInners.class)
            @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/overload-resolution/building-the-overload-candidate-set-ocs")
            public abstract static class Building_the_overload_candidate_set_ocs extends AbstractDiagnosisCompilerTestDataSpecTest {
                @RunWith(JUnit3RunnerWithInners.class)
                @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call")
                public abstract static class Infix_function_call extends AbstractDiagnosisCompilerTestDataSpecTest {
                    @RunWith(JUnit3RunnerWithInners.class)
                    @TestMetadata("../../intellij/out/kotlinc-testdata/testData/compiler/tests-spec/testData/diagnostics/notLinked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call/pos")
                    public static class Pos extends AbstractDiagnosisCompilerTestDataSpecTest {
                        private void runTest(String testDataFilePath) throws Exception {
                            KotlinTestUtils.runTest(this::doTest, this, testDataFilePath);
                        }

                        @TestMetadata("1.kt")
                        public void test1() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call/pos/1.kt"));
                        }

                        @TestMetadata("2.kt")
                        public void test2() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call/pos/2.kt"));
                        }

                        @TestMetadata("3.kt")
                        public void test3() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call/pos/3.kt"));
                        }

                        @TestMetadata("4.kt")
                        public void test4() throws Exception {
                            runTest(compilerTestData("compiler/tests-spec/testData/diagnostics/notLinked/overload-resolution/building-the-overload-candidate-set-ocs/infix-function-call/pos/4.kt"));
                        }
                    }
                }
            }
        }
    }
}
