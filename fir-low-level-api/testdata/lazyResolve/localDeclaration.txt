
RAW_FIR:
FILE: localDeclaration.kt
    public? final? class A : R|kotlin/Any| {
        public? [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public? final? fun x(): R|kotlin/Unit| {
            local final? [ContainingClassKey=A] class resolveMe : R|kotlin/Any| {
                public? [ContainingClassKey=resolveMe] constructor(): R|A.resolveMe| {
                    super<R|kotlin/Any|>()
                }

                public? final? val e: <implicit> = IntegerLiteral(2)
                    [ContainingClassKey=resolveMe] public? get(): <implicit>

            }

        }

    }

IMPORTS:
FILE: localDeclaration.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=SUPER_TYPES] class A : R|kotlin/Any| {
        public? [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvePhaseWithForAllDeclarationsKey=CONTRACTS] fun x(): R|kotlin/Unit| {
            local final? [ContainingClassKey=A] class resolveMe : R|kotlin/Any| {
                public? [ContainingClassKey=resolveMe] constructor(): R|A.resolveMe| {
                    super<R|kotlin/Any|>()
                }

                public? final? val e: <implicit> = IntegerLiteral(2)
                    [ContainingClassKey=resolveMe] public? get(): <implicit>

            }

        }

    }

SUPER_TYPES:
FILE: localDeclaration.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=SUPER_TYPES] class A : R|kotlin/Any| {
        public? [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvePhaseWithForAllDeclarationsKey=CONTRACTS] fun x(): R|kotlin/Unit| {
            local final? [ContainingClassKey=A] class resolveMe : R|kotlin/Any| {
                public? [ContainingClassKey=resolveMe] constructor(): R|A.resolveMe| {
                    super<R|kotlin/Any|>()
                }

                public? final? val e: <implicit> = IntegerLiteral(2)
                    [ContainingClassKey=resolveMe] public? get(): <implicit>

            }

        }

    }

TYPES:
FILE: localDeclaration.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=SUPER_TYPES] class A : R|kotlin/Any| {
        public? [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvePhaseWithForAllDeclarationsKey=CONTRACTS] fun x(): R|kotlin/Unit| {
            local final? [ContainingClassKey=A] class resolveMe : R|kotlin/Any| {
                public? [ContainingClassKey=resolveMe] constructor(): R|A.resolveMe| {
                    super<R|kotlin/Any|>()
                }

                public? final? val e: <implicit> = IntegerLiteral(2)
                    [ContainingClassKey=resolveMe] public? get(): <implicit>

            }

        }

    }

STATUS:
FILE: localDeclaration.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=SUPER_TYPES] class A : R|kotlin/Any| {
        public? [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvePhaseWithForAllDeclarationsKey=CONTRACTS] fun x(): R|kotlin/Unit| {
            local final? [ContainingClassKey=A] class resolveMe : R|kotlin/Any| {
                public? [ContainingClassKey=resolveMe] constructor(): R|A.resolveMe| {
                    super<R|kotlin/Any|>()
                }

                public? final? val e: <implicit> = IntegerLiteral(2)
                    [ContainingClassKey=resolveMe] public? get(): <implicit>

            }

        }

    }

CONTRACTS:
FILE: localDeclaration.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=SUPER_TYPES] class A : R|kotlin/Any| {
        public? [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvePhaseWithForAllDeclarationsKey=CONTRACTS] fun x(): R|kotlin/Unit| {
            local final? [ContainingClassKey=A] class resolveMe : R|kotlin/Any| {
                public? [ContainingClassKey=resolveMe] constructor(): R|A.resolveMe| {
                    super<R|kotlin/Any|>()
                }

                public? final? val e: <implicit> = IntegerLiteral(2)
                    [ContainingClassKey=resolveMe] public? get(): <implicit>

            }

        }

    }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: localDeclaration.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=SUPER_TYPES] class A : R|kotlin/Any| {
        public? [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvePhaseWithForAllDeclarationsKey=IMPLICIT_TYPES_BODY_RESOLVE] fun x(): R|kotlin/Unit| {
            local final? [ContainingClassKey=A] class resolveMe : R|kotlin/Any| {
                public? [ContainingClassKey=resolveMe] constructor(): R|A.resolveMe| {
                    super<R|kotlin/Any|>()
                }

                public? final? val e: <implicit> = IntegerLiteral(2)
                    [ContainingClassKey=resolveMe] public? get(): <implicit>

            }

        }

    }

BODY_RESOLVE:
FILE: localDeclaration.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=SUPER_TYPES] class A : R|kotlin/Any| {
        public? [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvePhaseWithForAllDeclarationsKey=BODY_RESOLVE] fun x(): R|kotlin/Unit| {
            local final [ContainingClassKey=A] class resolveMe : R|kotlin/Any| {
                public [ContainingClassKey=resolveMe] constructor(): R|A.resolveMe| {
                    super<R|kotlin/Any|>()
                }

                public final val e: R|kotlin/Int| = Int(2)
                    [ContainingClassKey=resolveMe] public get(): R|kotlin/Int|

            }

        }

    }

NoResolve:
FILE: localDeclaration.kt
    public? final? class A : R|kotlin/Any| {
        public? [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public? final? fun x(): R|kotlin/Unit| {
            local final? [ContainingClassKey=A] class resolveMe : R|kotlin/Any| {
                public? [ContainingClassKey=resolveMe] constructor(): R|A.resolveMe| {
                    super<R|kotlin/Any|>()
                }

                public? final? val e: <implicit> = IntegerLiteral(2)
                    [ContainingClassKey=resolveMe] public? get(): <implicit>

            }

        }

    }

BodyResolveWithChildren:
FILE: localDeclaration.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=SUPER_TYPES] class A : R|kotlin/Any| {
        public? [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvePhaseWithForAllDeclarationsKey=BODY_RESOLVE] fun x(): R|kotlin/Unit| {
            local final [ContainingClassKey=A] class resolveMe : R|kotlin/Any| {
                public [ContainingClassKey=resolveMe] constructor(): R|A.resolveMe| {
                    super<R|kotlin/Any|>()
                }

                public final val e: R|kotlin/Int| = Int(2)
                    [ContainingClassKey=resolveMe] public get(): R|kotlin/Int|

            }

        }

    }

AnnotationType:
FILE: localDeclaration.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=SUPER_TYPES] class A : R|kotlin/Any| {
        public? [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvePhaseWithForAllDeclarationsKey=CONTRACTS] fun x(): R|kotlin/Unit| {
            local final? [ContainingClassKey=A] class resolveMe : R|kotlin/Any| {
                public? [ContainingClassKey=resolveMe] constructor(): R|A.resolveMe| {
                    super<R|kotlin/Any|>()
                }

                public? final? val e: <implicit> = IntegerLiteral(2)
                    [ContainingClassKey=resolveMe] public? get(): <implicit>

            }

        }

    }

AnnotationsArguments:
FILE: localDeclaration.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=SUPER_TYPES] class A : R|kotlin/Any| {
        public? [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvePhaseWithForAllDeclarationsKey=BODY_RESOLVE] fun x(): R|kotlin/Unit| {
            local final [ContainingClassKey=A] class resolveMe : R|kotlin/Any| {
                public [ContainingClassKey=resolveMe] constructor(): R|A.resolveMe| {
                    super<R|kotlin/Any|>()
                }

                public final val e: R|kotlin/Int| = Int(2)
                    [ContainingClassKey=resolveMe] public get(): R|kotlin/Int|

            }

        }

    }

ClassSuperTypes:
FILE: localDeclaration.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=SUPER_TYPES] class A : R|kotlin/Any| {
        public? [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvePhaseWithForAllDeclarationsKey=CONTRACTS] fun x(): R|kotlin/Unit| {
            local final? [ContainingClassKey=A] class resolveMe : R|kotlin/Any| {
                public? [ContainingClassKey=resolveMe] constructor(): R|A.resolveMe| {
                    super<R|kotlin/Any|>()
                }

                public? final? val e: <implicit> = IntegerLiteral(2)
                    [ContainingClassKey=resolveMe] public? get(): <implicit>

            }

        }

    }

DeclarationStatus:
FILE: localDeclaration.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=SUPER_TYPES] class A : R|kotlin/Any| {
        public? [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvePhaseWithForAllDeclarationsKey=CONTRACTS] fun x(): R|kotlin/Unit| {
            local final? [ContainingClassKey=A] class resolveMe : R|kotlin/Any| {
                public? [ContainingClassKey=resolveMe] constructor(): R|A.resolveMe| {
                    super<R|kotlin/Any|>()
                }

                public? final? val e: <implicit> = IntegerLiteral(2)
                    [ContainingClassKey=resolveMe] public? get(): <implicit>

            }

        }

    }

ValueParametersTypes:
FILE: localDeclaration.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=SUPER_TYPES] class A : R|kotlin/Any| {
        public? [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvePhaseWithForAllDeclarationsKey=CONTRACTS] fun x(): R|kotlin/Unit| {
            local final? [ContainingClassKey=A] class resolveMe : R|kotlin/Any| {
                public? [ContainingClassKey=resolveMe] constructor(): R|A.resolveMe| {
                    super<R|kotlin/Any|>()
                }

                public? final? val e: <implicit> = IntegerLiteral(2)
                    [ContainingClassKey=resolveMe] public? get(): <implicit>

            }

        }

    }

TypeParametersTypes:
FILE: localDeclaration.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=SUPER_TYPES] class A : R|kotlin/Any| {
        public? [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final [ResolvePhaseWithForAllDeclarationsKey=CONTRACTS] fun x(): R|kotlin/Unit| {
            local final? [ContainingClassKey=A] class resolveMe : R|kotlin/Any| {
                public? [ContainingClassKey=resolveMe] constructor(): R|A.resolveMe| {
                    super<R|kotlin/Any|>()
                }

                public? final? val e: <implicit> = IntegerLiteral(2)
                    [ContainingClassKey=resolveMe] public? get(): <implicit>

            }

        }

    }

FILE RAW TO BODY:
FILE: localDeclaration.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=BODY_RESOLVE] class A : R|kotlin/Any| {
        public [ContainingClassKey=A] constructor(): R|A| {
            super<R|kotlin/Any|>()
        }

        public final fun x(): R|kotlin/Unit| {
            local final [ContainingClassKey=A] class resolveMe : R|kotlin/Any| {
                public [ContainingClassKey=resolveMe] constructor(): R|A.resolveMe| {
                    super<R|kotlin/Any|>()
                }

                public final val e: R|kotlin/Int| = Int(2)
                    [ContainingClassKey=resolveMe] public get(): R|kotlin/Int|

            }

        }

    }
