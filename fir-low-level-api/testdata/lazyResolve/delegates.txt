RAW_FIR:
FILE: delegates.kt
    public? final? fun resolveMe(): R|kotlin/Unit| {
        receive#(valueWithExplicitType#)
        receive#(valueWithImplicitType#)
        variableWithExplicitType# = IntegerLiteral(10)
        variableWithImplicitType# = IntegerLiteral(10)
    }
    public? final? fun receive(value: Int): R|kotlin/Unit| {
    }
    public? final? val delegate: <implicit> = object : ReadWriteProperty<Any?, Int> {
        private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<<implicit>>()
        }

        public? open? override fun getValue(thisRef: Any?, property: KProperty<*>): Int {
            ^getValue IntegerLiteral(1)
        }

        public? open? override fun setValue(thisRef: Any?, property: KProperty<*>, value: Int): R|kotlin/Unit| {
        }

    }

        public? get(): <implicit>
    public? final? val valueWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? val valueWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? var variableWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? var variableWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

IMPORTS:
FILE: delegates.kt
    public? final? fun resolveMe(): R|kotlin/Unit| {
        receive#(valueWithExplicitType#)
        receive#(valueWithImplicitType#)
        variableWithExplicitType# = IntegerLiteral(10)
        variableWithImplicitType# = IntegerLiteral(10)
    }
    public? final? fun receive(value: Int): R|kotlin/Unit| {
    }
    public? final? val delegate: <implicit> = object : ReadWriteProperty<Any?, Int> {
        private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<<implicit>>()
        }

        public? open? override fun getValue(thisRef: Any?, property: KProperty<*>): Int {
            ^getValue IntegerLiteral(1)
        }

        public? open? override fun setValue(thisRef: Any?, property: KProperty<*>, value: Int): R|kotlin/Unit| {
        }

    }

        public? get(): <implicit>
    public? final? val valueWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? val valueWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? var variableWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? var variableWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

SUPER_TYPES:
FILE: delegates.kt
    public? final? fun resolveMe(): R|kotlin/Unit| {
        receive#(valueWithExplicitType#)
        receive#(valueWithImplicitType#)
        variableWithExplicitType# = IntegerLiteral(10)
        variableWithImplicitType# = IntegerLiteral(10)
    }
    public? final? fun receive(value: Int): R|kotlin/Unit| {
    }
    public? final? val delegate: <implicit> = object : ReadWriteProperty<Any?, Int> {
        private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<<implicit>>()
        }

        public? open? override fun getValue(thisRef: Any?, property: KProperty<*>): Int {
            ^getValue IntegerLiteral(1)
        }

        public? open? override fun setValue(thisRef: Any?, property: KProperty<*>, value: Int): R|kotlin/Unit| {
        }

    }

        public? get(): <implicit>
    public? final? val valueWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? val valueWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? var variableWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? var variableWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

TYPES:
FILE: delegates.kt
    public? final? [ResolvePhaseWithForAllDeclarationsKey=TYPES] fun resolveMe(): R|kotlin/Unit| {
        receive#(valueWithExplicitType#)
        receive#(valueWithImplicitType#)
        variableWithExplicitType# = IntegerLiteral(10)
        variableWithImplicitType# = IntegerLiteral(10)
    }
    public? final? fun receive(value: Int): R|kotlin/Unit| {
    }
    public? final? val delegate: <implicit> = object : ReadWriteProperty<Any?, Int> {
        private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<<implicit>>()
        }

        public? open? override fun getValue(thisRef: Any?, property: KProperty<*>): Int {
            ^getValue IntegerLiteral(1)
        }

        public? open? override fun setValue(thisRef: Any?, property: KProperty<*>, value: Int): R|kotlin/Unit| {
        }

    }

        public? get(): <implicit>
    public? final? val valueWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? val valueWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? var variableWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? var variableWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

STATUS:
FILE: delegates.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] fun resolveMe(): R|kotlin/Unit| {
        receive#(valueWithExplicitType#)
        receive#(valueWithImplicitType#)
        variableWithExplicitType# = IntegerLiteral(10)
        variableWithImplicitType# = IntegerLiteral(10)
    }
    public? final? fun receive(value: Int): R|kotlin/Unit| {
    }
    public? final? val delegate: <implicit> = object : ReadWriteProperty<Any?, Int> {
        private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<<implicit>>()
        }

        public? open? override fun getValue(thisRef: Any?, property: KProperty<*>): Int {
            ^getValue IntegerLiteral(1)
        }

        public? open? override fun setValue(thisRef: Any?, property: KProperty<*>, value: Int): R|kotlin/Unit| {
        }

    }

        public? get(): <implicit>
    public? final? val valueWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? val valueWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? var variableWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? var variableWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

CONTRACTS:
FILE: delegates.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=CONTRACTS] fun resolveMe(): R|kotlin/Unit| {
        receive#(valueWithExplicitType#)
        receive#(valueWithImplicitType#)
        variableWithExplicitType# = IntegerLiteral(10)
        variableWithImplicitType# = IntegerLiteral(10)
    }
    public? final? fun receive(value: Int): R|kotlin/Unit| {
    }
    public? final? val delegate: <implicit> = object : ReadWriteProperty<Any?, Int> {
        private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<<implicit>>()
        }

        public? open? override fun getValue(thisRef: Any?, property: KProperty<*>): Int {
            ^getValue IntegerLiteral(1)
        }

        public? open? override fun setValue(thisRef: Any?, property: KProperty<*>, value: Int): R|kotlin/Unit| {
        }

    }

        public? get(): <implicit>
    public? final? val valueWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? val valueWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? var variableWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? var variableWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

IMPLICIT_TYPES_BODY_RESOLVE:
FILE: delegates.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=IMPLICIT_TYPES_BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        receive#(valueWithExplicitType#)
        receive#(valueWithImplicitType#)
        variableWithExplicitType# = IntegerLiteral(10)
        variableWithImplicitType# = IntegerLiteral(10)
    }
    public? final? fun receive(value: Int): R|kotlin/Unit| {
    }
    public? final? val delegate: <implicit> = object : ReadWriteProperty<Any?, Int> {
        private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<<implicit>>()
        }

        public? open? override fun getValue(thisRef: Any?, property: KProperty<*>): Int {
            ^getValue IntegerLiteral(1)
        }

        public? open? override fun setValue(thisRef: Any?, property: KProperty<*>, value: Int): R|kotlin/Unit| {
        }

    }

        public? get(): <implicit>
    public? final? val valueWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? val valueWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? var variableWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? var variableWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

BODY_RESOLVE:
FILE: delegates.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        R|/receive|(R|/valueWithExplicitType|)
        R|/receive|(R|/valueWithImplicitType|)
        R|/variableWithExplicitType| = Int(10)
        R|/variableWithImplicitType| = Int(10)
    }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] fun receive(value: R|kotlin/Int|): R|kotlin/Unit| {
    }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] val delegate: R|kotlin/properties/ReadWriteProperty<kotlin/Any?, kotlin/Int>| = object : R|kotlin/properties/ReadWriteProperty<kotlin/Any?, kotlin/Int>| {
        private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<R|kotlin/Any|>()
        }

        public final override operator fun getValue(thisRef: R|kotlin/Any?|, property: R|kotlin/reflect/KProperty<*>|): R|kotlin/Int| {
            ^getValue Int(1)
        }

        public final override operator fun setValue(thisRef: R|kotlin/Any?|, property: R|kotlin/reflect/KProperty<*>|, value: R|kotlin/Int|): R|kotlin/Unit| {
        }

    }

        public get(): R|kotlin/properties/ReadWriteProperty<kotlin/Any?, kotlin/Int>|
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] val valueWithExplicitType: R|kotlin/Int|by delegate#
        public get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] val valueWithImplicitType: R|kotlin/Int|by R|/delegate|
        public get(): R|kotlin/Int| {
            ^ D|/valueWithImplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.getValue: R|kotlin/Int|>|(Null(null), ::R|/valueWithImplicitType|)
        }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] var variableWithExplicitType: R|kotlin/Int|by delegate#
        public get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] var variableWithImplicitType: R|kotlin/Int|by R|/delegate|
        public get(): R|kotlin/Int| {
            ^ D|/variableWithImplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.getValue: R|kotlin/Int|>|(Null(null), ::R|/variableWithImplicitType|)
        }
        public set(<set-?>: R|kotlin/Int|): R|kotlin/Unit| {
            D|/variableWithImplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.setValue: R|kotlin/Unit|>|(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

NoResolve:
FILE: delegates.kt
    public? final? fun resolveMe(): R|kotlin/Unit| {
        receive#(valueWithExplicitType#)
        receive#(valueWithImplicitType#)
        variableWithExplicitType# = IntegerLiteral(10)
        variableWithImplicitType# = IntegerLiteral(10)
    }
    public? final? fun receive(value: Int): R|kotlin/Unit| {
    }
    public? final? val delegate: <implicit> = object : ReadWriteProperty<Any?, Int> {
        private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<<implicit>>()
        }

        public? open? override fun getValue(thisRef: Any?, property: KProperty<*>): Int {
            ^getValue IntegerLiteral(1)
        }

        public? open? override fun setValue(thisRef: Any?, property: KProperty<*>, value: Int): R|kotlin/Unit| {
        }

    }

        public? get(): <implicit>
    public? final? val valueWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? val valueWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? var variableWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? var variableWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

BodyResolveWithChildren:
FILE: delegates.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        R|/receive|(R|/valueWithExplicitType|)
        R|/receive|(R|/valueWithImplicitType|)
        R|/variableWithExplicitType| = Int(10)
        R|/variableWithImplicitType| = Int(10)
    }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] fun receive(value: R|kotlin/Int|): R|kotlin/Unit| {
    }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] val delegate: R|kotlin/properties/ReadWriteProperty<kotlin/Any?, kotlin/Int>| = object : R|kotlin/properties/ReadWriteProperty<kotlin/Any?, kotlin/Int>| {
        private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<R|kotlin/Any|>()
        }

        public final override operator fun getValue(thisRef: R|kotlin/Any?|, property: R|kotlin/reflect/KProperty<*>|): R|kotlin/Int| {
            ^getValue Int(1)
        }

        public final override operator fun setValue(thisRef: R|kotlin/Any?|, property: R|kotlin/reflect/KProperty<*>|, value: R|kotlin/Int|): R|kotlin/Unit| {
        }

    }

        public get(): R|kotlin/properties/ReadWriteProperty<kotlin/Any?, kotlin/Int>|
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] val valueWithExplicitType: R|kotlin/Int|by delegate#
        public get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] val valueWithImplicitType: R|kotlin/Int|by R|/delegate|
        public get(): R|kotlin/Int| {
            ^ D|/valueWithImplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.getValue: R|kotlin/Int|>|(Null(null), ::R|/valueWithImplicitType|)
        }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] var variableWithExplicitType: R|kotlin/Int|by delegate#
        public get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] var variableWithImplicitType: R|kotlin/Int|by R|/delegate|
        public get(): R|kotlin/Int| {
            ^ D|/variableWithImplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.getValue: R|kotlin/Int|>|(Null(null), ::R|/variableWithImplicitType|)
        }
        public set(<set-?>: R|kotlin/Int|): R|kotlin/Unit| {
            D|/variableWithImplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.setValue: R|kotlin/Unit|>|(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

CallableBodyResolve:
FILE: delegates.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        R|/receive|(R|/valueWithExplicitType|)
        R|/receive|(R|/valueWithImplicitType|)
        R|/variableWithExplicitType| = Int(10)
        R|/variableWithImplicitType| = Int(10)
    }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] fun receive(value: R|kotlin/Int|): R|kotlin/Unit| {
    }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] val delegate: R|kotlin/properties/ReadWriteProperty<kotlin/Any?, kotlin/Int>| = object : R|kotlin/properties/ReadWriteProperty<kotlin/Any?, kotlin/Int>| {
        private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<R|kotlin/Any|>()
        }

        public final override operator fun getValue(thisRef: R|kotlin/Any?|, property: R|kotlin/reflect/KProperty<*>|): R|kotlin/Int| {
            ^getValue Int(1)
        }

        public final override operator fun setValue(thisRef: R|kotlin/Any?|, property: R|kotlin/reflect/KProperty<*>|, value: R|kotlin/Int|): R|kotlin/Unit| {
        }

    }

        public get(): R|kotlin/properties/ReadWriteProperty<kotlin/Any?, kotlin/Int>|
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] val valueWithExplicitType: R|kotlin/Int|by delegate#
        public get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] val valueWithImplicitType: R|kotlin/Int|by R|/delegate|
        public get(): R|kotlin/Int| {
            ^ D|/valueWithImplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.getValue: R|kotlin/Int|>|(Null(null), ::R|/valueWithImplicitType|)
        }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] var variableWithExplicitType: R|kotlin/Int|by delegate#
        public get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] var variableWithImplicitType: R|kotlin/Int|by R|/delegate|
        public get(): R|kotlin/Int| {
            ^ D|/variableWithImplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.getValue: R|kotlin/Int|>|(Null(null), ::R|/variableWithImplicitType|)
        }
        public set(<set-?>: R|kotlin/Int|): R|kotlin/Unit| {
            D|/variableWithImplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.setValue: R|kotlin/Unit|>|(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

CallableReturnType:
FILE: delegates.kt
    public? final? fun resolveMe(): R|kotlin/Unit| {
        receive#(valueWithExplicitType#)
        receive#(valueWithImplicitType#)
        variableWithExplicitType# = IntegerLiteral(10)
        variableWithImplicitType# = IntegerLiteral(10)
    }
    public? final? fun receive(value: Int): R|kotlin/Unit| {
    }
    public? final? val delegate: <implicit> = object : ReadWriteProperty<Any?, Int> {
        private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<<implicit>>()
        }

        public? open? override fun getValue(thisRef: Any?, property: KProperty<*>): Int {
            ^getValue IntegerLiteral(1)
        }

        public? open? override fun setValue(thisRef: Any?, property: KProperty<*>, value: Int): R|kotlin/Unit| {
        }

    }

        public? get(): <implicit>
    public? final? val valueWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? val valueWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? var variableWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? var variableWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

AnnotationType:
FILE: delegates.kt
    public? final? [ResolvePhaseWithForAllDeclarationsKey=TYPES] fun resolveMe(): R|kotlin/Unit| {
        receive#(valueWithExplicitType#)
        receive#(valueWithImplicitType#)
        variableWithExplicitType# = IntegerLiteral(10)
        variableWithImplicitType# = IntegerLiteral(10)
    }
    public? final? fun receive(value: Int): R|kotlin/Unit| {
    }
    public? final? val delegate: <implicit> = object : ReadWriteProperty<Any?, Int> {
        private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<<implicit>>()
        }

        public? open? override fun getValue(thisRef: Any?, property: KProperty<*>): Int {
            ^getValue IntegerLiteral(1)
        }

        public? open? override fun setValue(thisRef: Any?, property: KProperty<*>, value: Int): R|kotlin/Unit| {
        }

    }

        public? get(): <implicit>
    public? final? val valueWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? val valueWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? var variableWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? var variableWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

AnnotationsArguments:
FILE: delegates.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        R|/receive|(R|/valueWithExplicitType|)
        R|/receive|(R|/valueWithImplicitType|)
        R|/variableWithExplicitType| = Int(10)
        R|/variableWithImplicitType| = Int(10)
    }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] fun receive(value: R|kotlin/Int|): R|kotlin/Unit| {
    }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] val delegate: R|kotlin/properties/ReadWriteProperty<kotlin/Any?, kotlin/Int>| = object : R|kotlin/properties/ReadWriteProperty<kotlin/Any?, kotlin/Int>| {
        private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<R|kotlin/Any|>()
        }

        public final override operator fun getValue(thisRef: R|kotlin/Any?|, property: R|kotlin/reflect/KProperty<*>|): R|kotlin/Int| {
            ^getValue Int(1)
        }

        public final override operator fun setValue(thisRef: R|kotlin/Any?|, property: R|kotlin/reflect/KProperty<*>|, value: R|kotlin/Int|): R|kotlin/Unit| {
        }

    }

        public get(): R|kotlin/properties/ReadWriteProperty<kotlin/Any?, kotlin/Int>|
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] val valueWithExplicitType: R|kotlin/Int|by delegate#
        public get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] val valueWithImplicitType: R|kotlin/Int|by R|/delegate|
        public get(): R|kotlin/Int| {
            ^ D|/valueWithImplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.getValue: R|kotlin/Int|>|(Null(null), ::R|/valueWithImplicitType|)
        }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] var variableWithExplicitType: R|kotlin/Int|by delegate#
        public get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] var variableWithImplicitType: R|kotlin/Int|by R|/delegate|
        public get(): R|kotlin/Int| {
            ^ D|/variableWithImplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.getValue: R|kotlin/Int|>|(Null(null), ::R|/variableWithImplicitType|)
        }
        public set(<set-?>: R|kotlin/Int|): R|kotlin/Unit| {
            D|/variableWithImplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.setValue: R|kotlin/Unit|>|(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

CallableContracts:
FILE: delegates.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=CONTRACTS] fun resolveMe(): R|kotlin/Unit| {
        receive#(valueWithExplicitType#)
        receive#(valueWithImplicitType#)
        variableWithExplicitType# = IntegerLiteral(10)
        variableWithImplicitType# = IntegerLiteral(10)
    }
    public? final? fun receive(value: Int): R|kotlin/Unit| {
    }
    public? final? val delegate: <implicit> = object : ReadWriteProperty<Any?, Int> {
        private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<<implicit>>()
        }

        public? open? override fun getValue(thisRef: Any?, property: KProperty<*>): Int {
            ^getValue IntegerLiteral(1)
        }

        public? open? override fun setValue(thisRef: Any?, property: KProperty<*>, value: Int): R|kotlin/Unit| {
        }

    }

        public? get(): <implicit>
    public? final? val valueWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? val valueWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? var variableWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? var variableWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

DeclarationStatus:
FILE: delegates.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=STATUS] fun resolveMe(): R|kotlin/Unit| {
        receive#(valueWithExplicitType#)
        receive#(valueWithImplicitType#)
        variableWithExplicitType# = IntegerLiteral(10)
        variableWithImplicitType# = IntegerLiteral(10)
    }
    public? final? fun receive(value: Int): R|kotlin/Unit| {
    }
    public? final? val delegate: <implicit> = object : ReadWriteProperty<Any?, Int> {
        private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<<implicit>>()
        }

        public? open? override fun getValue(thisRef: Any?, property: KProperty<*>): Int {
            ^getValue IntegerLiteral(1)
        }

        public? open? override fun setValue(thisRef: Any?, property: KProperty<*>, value: Int): R|kotlin/Unit| {
        }

    }

        public? get(): <implicit>
    public? final? val valueWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? val valueWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? var variableWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? var variableWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

ValueParametersTypes:
FILE: delegates.kt
    public? final? [ResolvePhaseWithForAllDeclarationsKey=TYPES] fun resolveMe(): R|kotlin/Unit| {
        receive#(valueWithExplicitType#)
        receive#(valueWithImplicitType#)
        variableWithExplicitType# = IntegerLiteral(10)
        variableWithImplicitType# = IntegerLiteral(10)
    }
    public? final? fun receive(value: Int): R|kotlin/Unit| {
    }
    public? final? val delegate: <implicit> = object : ReadWriteProperty<Any?, Int> {
        private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<<implicit>>()
        }

        public? open? override fun getValue(thisRef: Any?, property: KProperty<*>): Int {
            ^getValue IntegerLiteral(1)
        }

        public? open? override fun setValue(thisRef: Any?, property: KProperty<*>, value: Int): R|kotlin/Unit| {
        }

    }

        public? get(): <implicit>
    public? final? val valueWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? val valueWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? var variableWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? var variableWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

TypeParametersTypes:
FILE: delegates.kt
    public? final? [ResolvePhaseWithForAllDeclarationsKey=TYPES] fun resolveMe(): R|kotlin/Unit| {
        receive#(valueWithExplicitType#)
        receive#(valueWithImplicitType#)
        variableWithExplicitType# = IntegerLiteral(10)
        variableWithImplicitType# = IntegerLiteral(10)
    }
    public? final? fun receive(value: Int): R|kotlin/Unit| {
    }
    public? final? val delegate: <implicit> = object : ReadWriteProperty<Any?, Int> {
        private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<<implicit>>()
        }

        public? open? override fun getValue(thisRef: Any?, property: KProperty<*>): Int {
            ^getValue IntegerLiteral(1)
        }

        public? open? override fun setValue(thisRef: Any?, property: KProperty<*>, value: Int): R|kotlin/Unit| {
        }

    }

        public? get(): <implicit>
    public? final? val valueWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/valueWithExplicitType|.getValue#(Null(null), ::R|/valueWithExplicitType|)
        }
    public? final? val valueWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/valueWithImplicitType|.getValue#(Null(null), ::R|/valueWithImplicitType|)
        }
    public? final? var variableWithExplicitType: Intby delegate#
        public? get(): <implicit> {
            ^ D|/variableWithExplicitType|.getValue#(Null(null), ::R|/variableWithExplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithExplicitType|.setValue#(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public? final? var variableWithImplicitType: <implicit>by delegate#
        public? get(): <implicit> {
            ^ D|/variableWithImplicitType|.getValue#(Null(null), ::R|/variableWithImplicitType|)
        }
        public? set(<set-?>: <implicit>): R|kotlin/Unit| {
            D|/variableWithImplicitType|.setValue#(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }

FILE RAW TO BODY:
FILE: delegates.kt
    public final [ResolvePhaseWithForAllDeclarationsKey=BODY_RESOLVE] fun resolveMe(): R|kotlin/Unit| {
        R|/receive|(R|/valueWithExplicitType|)
        R|/receive|(R|/valueWithImplicitType|)
        R|/variableWithExplicitType| = Int(10)
        R|/variableWithImplicitType| = Int(10)
    }
    public final [ResolvePhaseWithForAllDeclarationsKey=BODY_RESOLVE] fun receive(value: R|kotlin/Int|): R|kotlin/Unit| {
    }
    public final [ResolvePhaseWithForAllDeclarationsKey=BODY_RESOLVE] val delegate: R|kotlin/properties/ReadWriteProperty<kotlin/Any?, kotlin/Int>| = object : R|kotlin/properties/ReadWriteProperty<kotlin/Any?, kotlin/Int>| {
        private [ContainingClassKey=<anonymous>] constructor(): R|<anonymous>| {
            super<R|kotlin/Any|>()
        }

        public final override operator fun getValue(thisRef: R|kotlin/Any?|, property: R|kotlin/reflect/KProperty<*>|): R|kotlin/Int| {
            ^getValue Int(1)
        }

        public final override operator fun setValue(thisRef: R|kotlin/Any?|, property: R|kotlin/reflect/KProperty<*>|, value: R|kotlin/Int|): R|kotlin/Unit| {
        }

    }

        public get(): R|kotlin/properties/ReadWriteProperty<kotlin/Any?, kotlin/Int>|
    public final [ResolvePhaseWithForAllDeclarationsKey=BODY_RESOLVE] val valueWithExplicitType: R|kotlin/Int|by R|/delegate|
        public get(): R|kotlin/Int| {
            ^ D|/valueWithExplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.getValue: R|kotlin/Int|>|(Null(null), ::R|/valueWithExplicitType|)
        }
    public final [ResolvePhaseWithForAllDeclarationsKey=BODY_RESOLVE] val valueWithImplicitType: R|kotlin/Int|by R|/delegate|
        public get(): R|kotlin/Int| {
            ^ D|/valueWithImplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.getValue: R|kotlin/Int|>|(Null(null), ::R|/valueWithImplicitType|)
        }
    public final [ResolvePhaseWithForAllDeclarationsKey=BODY_RESOLVE] var variableWithExplicitType: R|kotlin/Int|by R|/delegate|
        public get(): R|kotlin/Int| {
            ^ D|/variableWithExplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.getValue: R|kotlin/Int|>|(Null(null), ::R|/variableWithExplicitType|)
        }
        public set(<set-?>: R|kotlin/Int|): R|kotlin/Unit| {
            D|/variableWithExplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.setValue: R|kotlin/Unit|>|(Null(null), ::R|/variableWithExplicitType|, R|<local>/variableWithExplicitType|)
        }
    public final [ResolvePhaseWithForAllDeclarationsKey=BODY_RESOLVE] var variableWithImplicitType: R|kotlin/Int|by R|/delegate|
        public get(): R|kotlin/Int| {
            ^ D|/variableWithImplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.getValue: R|kotlin/Int|>|(Null(null), ::R|/variableWithImplicitType|)
        }
        public set(<set-?>: R|kotlin/Int|): R|kotlin/Unit| {
            D|/variableWithImplicitType|.R|SubstitutionOverride<kotlin/properties/ReadWriteProperty.setValue: R|kotlin/Unit|>|(Null(null), ::R|/variableWithImplicitType|, R|<local>/variableWithImplicitType|)
        }
